
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAlphType CloseStruct Concat Eq Int IntType LGroup LangType LenOp NextLine On OpenStruct Pow Prefix RGroup Show Splitter String StringType Term VarNameAlphExpression : AlphIntExpression : Int\n        | StringLen\n        | VarValueVarValue : VarNameAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructStringExpression : StringConcatStringLen : LenOp StringExpression LenOpStringConcat : StringConcat Concat StringPow\n                    | StringPowStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionexpressions : expressions expression Term\n                    | expression TermStringPrefix : Prefix StringExpressionStringPow : StringPow Pow IntExpression\n                | StringGroup expression : StringExpression\n                    | IntExpression\n                    | AlphExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresShowVal : Show IntExpression\n                | Show StringExpressionStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VarValueDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclareAssigns : StringAssign\n        | IntAssign\n        | AlphAssignStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionStringAssign : VarName Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpression'
    
_lr_action_items = {'Int':([0,1,14,32,40,43,50,66,70,],[10,10,10,-15,10,10,-14,10,10,]),'Show':([0,1,32,50,],[14,14,-15,-14,]),'LenOp':([0,1,9,10,11,14,21,28,30,32,36,40,41,42,43,50,51,55,56,57,66,68,70,],[22,22,-8,-2,-3,22,-11,-18,-28,-15,-5,22,57,-29,22,-14,-10,-17,-4,-9,22,-27,22,]),'VarName':([0,1,14,22,24,25,26,27,29,32,33,37,38,39,40,43,50,62,64,65,66,69,70,],[23,23,36,36,36,46,47,48,36,-15,36,52,53,54,36,36,-14,36,36,36,36,36,36,]),'OpenStruct':([0,1,32,43,50,67,71,],[24,24,-15,24,-14,24,24,]),'StringType':([0,1,32,50,],[25,25,-15,-14,]),'IntType':([0,1,32,50,],[26,26,-15,-14,]),'AlphType':([0,1,32,50,],[27,27,-15,-14,]),'LGroup':([0,1,14,22,24,29,32,33,43,50,62,64,65,69,],[29,29,29,29,29,29,-15,29,29,-14,29,29,29,29,]),'String':([0,1,14,22,24,29,32,33,43,50,62,64,65,69,],[30,30,30,30,30,30,-15,30,30,-14,30,30,30,30,]),'$end':([1,32,50,],[0,-15,-14,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,23,28,30,31,34,35,36,42,46,47,48,51,52,53,54,55,56,57,58,59,60,61,63,68,74,75,76,77,78,79,],[32,-19,-20,-21,-22,-23,-24,-8,-2,-3,-4,-1,-33,-34,-35,-30,-31,-32,-11,-5,-18,-28,50,-25,-26,-5,-29,-36,-41,-46,-10,-38,-43,-48,-17,-4,-9,-40,-45,-50,-6,-7,-27,-37,-42,-47,-39,-44,-49,]),'CloseStruct':([9,10,11,21,28,30,36,42,44,45,51,55,56,57,68,72,73,],[-8,-2,-3,-11,-18,-28,-5,-29,61,63,-10,-17,-4,-9,-27,-12,-13,]),'Splitter':([9,10,11,13,18,19,20,21,28,30,36,42,44,45,46,47,48,51,52,53,54,55,56,57,61,63,68,72,73,74,75,76,77,78,79,],[-8,-2,-3,-1,37,38,39,-11,-18,-28,-5,-29,62,64,-36,-41,-46,-10,-38,-43,-48,-17,-4,-9,-6,-7,-27,-12,-13,-37,-42,-47,-39,-44,-49,]),'RGroup':([9,10,11,21,28,30,36,42,49,51,55,56,57,68,],[-8,-2,-3,-11,-18,-28,-5,-29,68,-10,-17,-4,-9,-27,]),'Concat':([9,10,11,12,21,23,28,30,36,42,51,55,56,57,68,],[33,-2,-3,-29,-11,-5,-18,-28,-5,-29,-10,-17,-4,-9,-27,]),'Pow':([10,11,12,21,23,28,30,36,42,51,55,56,57,68,],[-2,-3,-29,40,-5,-18,-28,-5,-29,40,-17,-4,-9,-27,]),'Eq':([23,46,47,48,52,53,54,],[43,65,66,67,69,70,71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,],[2,31,]),'StringExpression':([0,1,14,22,24,29,43,62,64,65,69,],[3,3,35,41,45,49,58,72,73,74,77,]),'IntExpression':([0,1,14,40,43,66,70,],[4,4,34,55,59,75,78,]),'AlphExpression':([0,1,43,67,71,],[5,5,60,76,79,]),'ShowVal':([0,1,],[6,6,]),'Assigns':([0,1,],[7,7,]),'Declares':([0,1,],[8,8,]),'StringConcat':([0,1,14,22,24,29,43,62,64,65,69,],[9,9,9,9,9,9,9,9,9,9,9,]),'StringLen':([0,1,14,40,43,66,70,],[11,11,11,11,11,11,11,]),'VarValue':([0,1,14,22,24,29,33,40,43,62,64,65,66,69,70,],[12,12,12,42,42,42,42,56,12,42,42,42,56,42,56,]),'Alph':([0,1,43,67,71,],[13,13,13,13,13,]),'StringAssign':([0,1,],[15,15,]),'IntAssign':([0,1,],[16,16,]),'AlphAssign':([0,1,],[17,17,]),'StringDeclare':([0,1,],[18,18,]),'IntDeclare':([0,1,],[19,19,]),'AlphDeclare':([0,1,],[20,20,]),'StringPow':([0,1,14,22,24,29,33,43,62,64,65,69,],[21,21,21,21,21,21,51,21,21,21,21,21,]),'StringGroup':([0,1,14,22,24,29,33,43,62,64,65,69,],[28,28,28,28,28,28,28,28,28,28,28,28,]),'StringList':([24,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('AlphExpression -> Alph','AlphExpression',1,'p_AlphExpression','alph.py',2),
  ('IntExpression -> Int','IntExpression',1,'p_IntegerExpression','integers.py',5),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',6),
  ('IntExpression -> VarValue','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('VarValue -> VarName','VarValue',1,'p_VarValue','variables.py',5),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',7),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',8),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',7),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',12),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',12),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',13),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',16),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',17),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',17),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',18),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','integers.py',17),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',21),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',22),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',23),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',24),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',25),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',26),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',27),
  ('expression -> Declares','expression',1,'p_expression','parser.py',28),
  ('ShowVal -> Show IntExpression','ShowVal',2,'p_ShowVal','instructions.py',27),
  ('ShowVal -> Show StringExpression','ShowVal',2,'p_ShowVal','instructions.py',28),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',31),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',32),
  ('StringGroup -> VarValue','StringGroup',1,'p_StringGroup','strings.py',33),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',39),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',40),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',41),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',45),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',46),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',47),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',52),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',53),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',54),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',55),
  ('StringAssign -> VarName Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',70),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',78),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',79),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',80),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',81),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',95),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',103),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',104),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',105),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',106),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',120),
]
