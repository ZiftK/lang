
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAlphType And BooleanType CloseStruct Concat Eq False Int IntType KleeneC LGroup LangType LenOp NextLine On OpenStruct Or Pow Prefix RGroup Show Splitter String StringType SuchThat Suffix Term True VAlph VBoolean VInt VLang VString VarNameBooleanExpression : BooleanOrAlphExpression : AlphConcatIntExpression : Int\n        | StringLen\n        | VIntLangExpression : StringPrefix\n    | StringSuffix\n    | AlphKleeneC\n    | VLangBooleanOr : BooleanAnd Or BooleanAnd\n                | BooleanAndStringExpression : StringConcatStringConcat : StringConcat Concat StringPow\n                    | StringPowStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpAlphConcat : AlphConcat Concat AlphPow\n        | AlphPowAlphKleeneC : AlphExpression KleeneC IntExpressionexpressions : expressions expression Term\n                    | expression TermBooleanAnd : BooleanAnd And BooleanAnd\n                    | BooleanGroupStringPrefix : Prefix StringExpressionStringPow : StringPow Pow IntExpression\n                | StringGroup expression : IntExpression\n                    | AlphExpression\n                    | StringExpression\n                    | LangExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAlphPow : AlphPow Pow IntExpression\n            | AlphGroupShowVal : Show expressionStringSuffix : Suffix StringExpressionBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VBooleanStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VStringDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareAlphGroup : LGroup AlphExpression RGroup\n    | Alph\n    | VAlphAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignBoolean : True\n                | FalseAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionStringAssign : VarName Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VarName Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VarName Eq BooleanExpression'
    
_lr_action_items = {'Int':([0,1,19,50,51,62,63,66,76,104,115,],[10,10,10,-21,10,10,10,10,-20,10,10,]),'VInt':([0,1,19,50,51,62,63,66,76,104,115,],[12,12,12,-21,12,12,12,12,-20,12,12,]),'VLang':([0,1,19,50,66,76,106,117,],[18,18,18,-21,18,-20,18,18,]),'Show':([0,1,19,50,76,],[19,19,19,-21,-20,]),'LenOp':([0,1,10,11,12,13,14,19,31,32,41,42,44,45,46,47,50,51,60,62,63,66,76,78,80,86,88,89,104,108,109,110,112,115,119,137,],[30,30,-3,-4,-5,-2,-12,30,-18,-14,-35,-26,-50,-51,-42,-43,-21,30,86,30,30,30,-20,-17,-13,-15,-34,-25,30,-49,-41,-59,-60,30,137,-16,]),'Prefix':([0,1,19,50,66,76,106,117,],[33,33,33,-21,33,-20,33,33,]),'Suffix':([0,1,19,50,66,76,106,117,],[34,34,34,-21,34,-20,34,34,]),'VarName':([0,1,19,36,37,38,39,40,50,55,56,57,58,59,76,],[35,35,35,67,68,69,70,71,-21,81,82,83,84,85,-20,]),'StringType':([0,1,19,50,76,],[36,36,36,-21,-20,]),'IntType':([0,1,19,50,76,],[37,37,37,-21,-20,]),'AlphType':([0,1,19,50,76,],[38,38,38,-21,-20,]),'LangType':([0,1,19,50,76,],[39,39,39,-21,-20,]),'BooleanType':([0,1,19,50,76,],[40,40,40,-21,-20,]),'LGroup':([0,1,19,30,33,34,43,48,50,52,53,61,66,76,79,87,98,103,105,106,107,111,113,114,116,117,118,120,121,129,],[43,43,43,61,61,61,43,61,-21,79,61,61,98,-20,79,79,98,61,79,79,129,61,61,61,79,79,129,129,129,129,]),'VAlph':([0,1,19,43,50,52,66,76,79,87,98,105,106,116,117,],[45,45,45,45,-21,45,45,-20,45,45,45,45,45,45,45,]),'String':([0,1,19,30,33,34,43,48,50,53,61,66,76,98,103,111,113,114,],[46,46,46,46,46,46,46,46,-21,46,46,46,-20,46,46,46,46,46,]),'VString':([0,1,19,30,33,34,43,48,50,53,61,66,76,98,103,111,113,114,],[47,47,47,47,47,47,47,47,-21,47,47,47,-20,47,47,47,47,47,]),'OpenStruct':([0,1,19,43,50,52,66,76,79,87,98,105,106,116,117,],[48,48,48,48,-21,48,48,-20,48,48,48,48,48,48,48,]),'$end':([1,50,76,],[0,-21,-20,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,31,32,41,42,44,45,46,47,49,54,64,65,67,68,69,70,71,77,78,80,81,82,83,84,85,86,88,89,90,91,92,93,94,95,96,97,99,100,101,102,108,109,110,112,123,124,125,126,128,132,133,134,135,136,137,138,139,140,],[50,-27,-28,-29,-30,-31,-32,-33,-3,-4,-5,-2,-12,-6,-7,-8,-9,-52,-53,-54,-55,-56,-44,-45,-46,-47,-48,-18,-14,-35,-26,-50,-51,-42,-43,76,-36,-24,-37,-61,-68,-73,-78,-83,-19,-17,-13,-63,-70,-75,-80,-85,-15,-34,-25,-67,-72,-77,-82,-87,-1,-11,-23,-39,-40,-57,-58,-49,-41,-59,-60,-62,-69,-74,-79,-84,-64,-71,-76,-81,-86,-16,-10,-22,-38,]),'KleeneC':([4,10,11,12,13,31,41,44,45,78,86,88,92,108,110,112,127,137,],[51,-3,-4,-5,-2,-18,-35,-50,-51,-17,-15,-34,51,-49,-59,-60,51,-16,]),'Splitter':([10,11,12,13,14,15,16,17,18,25,26,27,28,29,31,32,41,42,44,45,46,47,64,65,67,68,69,70,71,74,75,77,78,80,81,82,83,84,85,86,88,89,95,96,97,99,100,101,102,108,109,110,112,123,124,125,126,128,130,131,132,133,134,135,136,137,138,139,140,],[-3,-4,-5,-2,-12,-6,-7,-8,-9,55,56,57,58,59,-18,-14,-35,-26,-50,-51,-42,-43,-24,-37,-61,-68,-73,-78,-83,111,113,-19,-17,-13,-63,-70,-75,-80,-85,-15,-34,-25,-1,-11,-23,-39,-40,-57,-58,-49,-41,-59,-60,-62,-69,-74,-79,-84,-65,-66,-64,-71,-76,-81,-86,-16,-10,-22,-38,]),'Pow':([10,11,12,31,32,41,42,44,45,46,47,78,80,86,88,89,108,109,110,112,137,],[-3,-4,-5,62,63,-35,-26,-50,-51,-42,-43,62,63,-15,-34,-25,-49,-41,-59,-60,-16,]),'Concat':([10,11,12,13,14,31,32,41,42,44,45,46,47,78,80,86,88,89,108,109,110,112,137,],[-3,-4,-5,52,53,-18,-14,-35,-26,-50,-51,-42,-43,-17,-13,-15,-34,-25,-49,-41,-59,-60,-16,]),'RGroup':([10,11,12,13,14,31,32,41,42,44,45,46,47,72,73,78,80,86,88,89,95,96,97,99,100,101,102,108,109,110,112,122,137,138,139,140,],[-3,-4,-5,-2,-12,-18,-14,-35,-26,-50,-51,-42,-43,108,109,-17,-13,-15,-34,-25,-1,-11,-23,-39,-40,-57,-58,-49,-41,-59,-60,140,-16,-10,-22,-38,]),'On':([10,11,12,14,32,42,46,47,60,80,86,89,109,137,],[-3,-4,-5,-12,-14,-26,-42,-43,87,-13,-15,-25,-41,-16,]),'CloseStruct':([10,11,12,14,32,42,46,47,74,75,80,86,89,109,130,131,137,],[-3,-4,-5,-12,-14,-26,-42,-43,110,112,-13,-15,-25,-41,-65,-66,-16,]),'Eq':([35,67,68,69,70,71,81,82,83,84,85,],[66,103,104,105,106,107,114,115,116,117,118,]),'VBoolean':([66,98,107,118,120,121,129,],[100,100,100,100,100,100,100,]),'True':([66,98,107,118,120,121,129,],[101,101,101,101,101,101,101,]),'False':([66,98,107,118,120,121,129,],[102,102,102,102,102,102,102,]),'Or':([96,97,99,100,101,102,139,140,],[120,-23,-39,-40,-57,-58,-22,-38,]),'And':([96,97,99,100,101,102,138,139,140,],[121,-23,-39,-40,-57,-58,121,121,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,19,],[2,49,54,]),'IntExpression':([0,1,19,51,62,63,66,104,115,],[3,3,3,77,88,89,91,124,133,]),'AlphExpression':([0,1,19,43,66,79,87,98,105,106,116,117,],[4,4,4,72,92,72,119,72,125,127,134,127,]),'StringExpression':([0,1,19,30,33,34,43,48,61,66,98,103,111,113,114,],[5,5,5,60,64,65,73,75,73,90,73,123,130,131,132,]),'LangExpression':([0,1,19,66,106,117,],[6,6,6,93,126,135,]),'ShowVal':([0,1,19,],[7,7,7,]),'Assigns':([0,1,19,],[8,8,8,]),'Declares':([0,1,19,],[9,9,9,]),'StringLen':([0,1,19,51,62,63,66,104,115,],[11,11,11,11,11,11,11,11,11,]),'AlphConcat':([0,1,19,43,66,79,87,98,105,106,116,117,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'StringConcat':([0,1,19,30,33,34,43,48,61,66,98,103,111,113,114,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'StringPrefix':([0,1,19,66,106,117,],[15,15,15,15,15,15,]),'StringSuffix':([0,1,19,66,106,117,],[16,16,16,16,16,16,]),'AlphKleeneC':([0,1,19,66,106,117,],[17,17,17,17,17,17,]),'StringAssign':([0,1,19,],[20,20,20,]),'IntAssign':([0,1,19,],[21,21,21,]),'AlphAssign':([0,1,19,],[22,22,22,]),'LangAssign':([0,1,19,],[23,23,23,]),'BooleanAssign':([0,1,19,],[24,24,24,]),'StringDeclare':([0,1,19,],[25,25,25,]),'IntDeclare':([0,1,19,],[26,26,26,]),'AlphDeclare':([0,1,19,],[27,27,27,]),'LangDeclare':([0,1,19,],[28,28,28,]),'BooleanDeclare':([0,1,19,],[29,29,29,]),'AlphPow':([0,1,19,43,52,66,79,87,98,105,106,116,117,],[31,31,31,31,78,31,31,31,31,31,31,31,31,]),'StringPow':([0,1,19,30,33,34,43,48,53,61,66,98,103,111,113,114,],[32,32,32,32,32,32,32,32,80,32,32,32,32,32,32,32,]),'AlphGroup':([0,1,19,43,52,66,79,87,98,105,106,116,117,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'StringGroup':([0,1,19,30,33,34,43,48,53,61,66,98,103,111,113,114,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'Alph':([0,1,19,43,52,66,79,87,98,105,106,116,117,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'StringList':([48,],[74,]),'BooleanExpression':([66,98,107,118,129,],[94,122,128,136,122,]),'BooleanOr':([66,98,107,118,129,],[95,95,95,95,95,]),'BooleanAnd':([66,98,107,118,120,121,129,],[96,96,96,96,138,139,96,]),'BooleanGroup':([66,98,107,118,120,121,129,],[97,97,97,97,97,97,97,]),'Boolean':([66,98,107,118,120,121,129,],[99,99,99,99,99,99,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',2),
  ('AlphExpression -> AlphConcat','AlphExpression',1,'p_AlphExpression','alph.py',5),
  ('IntExpression -> Int','IntExpression',1,'p_IntegerExpression','integers.py',6),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('IntExpression -> VInt','IntExpression',1,'p_IntegerExpression','integers.py',8),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',6),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',7),
  ('LangExpression -> AlphKleeneC','LangExpression',1,'p_LangExpression','lang.py',8),
  ('LangExpression -> VLang','LangExpression',1,'p_LangExpression','lang.py',9),
  ('BooleanOr -> BooleanAnd Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',7),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',8),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',7),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',12),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',13),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',13),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',14),
  ('AlphConcat -> AlphConcat Concat AlphPow','AlphConcat',3,'p_AlphConcat','alph.py',14),
  ('AlphConcat -> AlphPow','AlphConcat',1,'p_AlphConcat','alph.py',15),
  ('AlphKleeneC -> AlphExpression KleeneC IntExpression','AlphKleeneC',3,'p_AlphKleeneC','lang.py',15),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('BooleanAnd -> BooleanAnd And BooleanAnd','BooleanAnd',3,'p_BooleanAnd','boolean.py',19),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',20),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',21),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',21),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',22),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',25),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',29),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',30),
  ('expression -> Declares','expression',1,'p_expression','parser.py',31),
  ('AlphPow -> AlphPow Pow IntExpression','AlphPow',3,'p_AlphPow','alph.py',27),
  ('AlphPow -> AlphGroup','AlphPow',1,'p_AlphPow','alph.py',28),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',27),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',29),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',31),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',32),
  ('BooleanGroup -> VBoolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',33),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',31),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',32),
  ('StringGroup -> VString','StringGroup',1,'p_StringGroup','strings.py',33),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',34),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',35),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',36),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',37),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',38),
  ('AlphGroup -> LGroup AlphExpression RGroup','AlphGroup',3,'p_AlphGroup','alph.py',38),
  ('AlphGroup -> Alph','AlphGroup',1,'p_AlphGroup','alph.py',39),
  ('AlphGroup -> VAlph','AlphGroup',1,'p_AlphGroup','alph.py',40),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',43),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',44),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',45),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',46),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',47),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',44),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',45),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',49),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',50),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',52),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',53),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',54),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',55),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',58),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',59),
  ('StringAssign -> VarName Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',70),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',78),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',79),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',80),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',81),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',95),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',103),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',104),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',105),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',106),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',120),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',128),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',129),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',130),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',131),
  ('LangAssign -> VarName Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',145),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',153),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',154),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',155),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',156),
  ('BooleanAssign -> VarName Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',171),
]
