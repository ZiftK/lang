
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAdd AlphType And BooleanType CloseStruct Concat Eq False Int IntType KleeneC LGroup LangType LenOp NextLine On OpenStruct Or PositiveC Pow Prefix RGroup Show Splitter String StringType Sub SuchThat Suffix Term True VAlph VBoolean VInt VLang VString VarNameBooleanExpression : BooleanOrAlphExpression : AlphConcatLangExpression : StringPrefix\n    | StringSuffix\n    | AlphKleeneC\n    | AlphPositiveC\n    | LangKleeneC\n    | LangPositiveC\n    | VLangBooleanOr : BooleanAnd Or BooleanAnd\n                | BooleanAndIntExpression : Int\n        | StringLen\n        | VIntStringExpression : StringConcatAlphConcat : AlphConcat Concat AlphPow\n        | AlphPowStringConcat : StringConcat Concat StringPow\n                    | StringPowStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpLangUnion : LangUnion Add LangConcat\n                | LangConcatexpressions : expressions expression Term\n                    | expression TermBooleanAnd : BooleanAnd And BooleanAnd\n                    | BooleanGroupLangConcat : LangConcat Concat LangGroup\n                | LangGroupStringPow : StringPow Pow IntExpression\n                | StringGroup expression : IntExpression\n                    | AlphExpression\n                    | StringExpression\n                    | LangExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAlphPow : AlphPow Pow IntExpression\n            | AlphGroupLangGroup : LGroup LangExpression RGroupBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VBooleanAlphKleeneC : AlphExpression KleeneC IntExpressionStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VStringShowVal : Show expressionAlphPositiveC : AlphExpression PositiveC IntExpressionAlphGroup : LGroup AlphExpression RGroup\n    | Alph\n    | VAlphDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareLangKleeneC : LangExpression KleeneC IntExpressionBoolean : True\n                | FalseAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructLangPositiveC : LangExpression PositiveC IntExpressionAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignStringPrefix : Prefix StringExpressionStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionStringSuffix : Suffix StringExpressionStringAssign : VString Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VLang Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VarName Eq BooleanExpression'
    
_lr_action_items = {'Int':([0,1,22,53,54,55,56,57,70,71,75,85,118,129,],[10,10,10,-25,10,10,10,10,10,10,10,-24,10,10,]),'VInt':([0,1,22,53,54,55,56,57,70,71,75,85,118,129,],[12,12,12,-25,12,12,12,12,12,12,12,-24,12,12,]),'VLang':([0,1,22,53,60,85,120,131,],[21,21,21,-25,93,-24,93,93,]),'Show':([0,1,22,53,85,],[22,22,22,-25,-24,]),'LenOp':([0,1,10,11,12,13,14,22,34,35,45,46,48,49,50,53,54,55,56,57,67,69,70,71,75,85,90,92,101,103,104,118,122,123,124,126,129,133,150,],[33,33,-12,-13,-14,-2,-15,33,-17,-19,-40,-31,-52,-53,-47,-25,33,33,33,33,101,-48,33,33,33,-24,-16,-18,-20,-39,-30,33,-51,-46,-62,-63,33,150,-21,]),'Prefix':([0,1,22,53,60,85,120,131,],[36,36,36,-25,36,-24,36,36,]),'Suffix':([0,1,22,53,60,85,120,131,],[37,37,37,-25,37,-24,37,37,]),'VString':([0,1,22,33,36,37,47,51,53,59,68,74,85,117,125,127,128,],[38,38,38,69,69,69,69,69,-25,69,69,69,-24,69,69,69,69,]),'VarName':([0,1,22,40,41,42,43,44,53,62,63,64,65,66,85,],[39,39,39,76,77,78,79,80,-25,96,97,98,99,100,-24,]),'StringType':([0,1,22,53,85,],[40,40,40,-25,-24,]),'IntType':([0,1,22,53,85,],[41,41,41,-25,-24,]),'AlphType':([0,1,22,53,85,],[42,42,42,-25,-24,]),'LangType':([0,1,22,53,85,],[43,43,43,-25,-24,]),'BooleanType':([0,1,22,53,85,],[44,44,44,-25,-24,]),'LGroup':([0,1,22,33,36,37,47,51,53,58,59,60,68,74,75,85,91,102,112,117,119,120,121,125,127,128,130,131,132,134,135,142,],[47,47,47,68,68,68,47,68,-25,91,68,91,68,68,112,-24,91,91,112,68,91,91,142,68,68,68,91,91,142,142,142,142,]),'VAlph':([0,1,22,47,53,58,60,75,85,91,102,112,119,120,130,131,],[49,49,49,49,-25,49,49,49,-24,49,49,49,49,49,49,49,]),'String':([0,1,22,33,36,37,47,51,53,59,68,74,85,117,125,127,128,],[50,50,50,50,50,50,50,50,-25,50,50,50,-24,50,50,50,50,]),'OpenStruct':([0,1,22,47,53,58,60,75,85,91,102,112,119,120,130,131,],[51,51,51,51,-25,51,51,51,-24,51,51,51,51,51,51,51,]),'$end':([1,53,85,],[0,-25,-24,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,38,45,46,48,49,50,52,61,69,72,73,76,77,78,79,80,86,87,88,89,90,92,93,94,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,113,114,115,116,122,123,124,126,137,138,139,140,141,145,146,147,148,149,150,151,152,153,],[53,-32,-33,-34,-35,-36,-37,-38,-12,-13,-14,-2,-15,-3,-4,-5,-6,-7,-8,-9,-65,-66,-67,-68,-69,-54,-55,-56,-57,-58,-17,-19,-48,-40,-31,-52,-53,-47,85,-49,-48,-70,-77,-73,-79,-84,-89,-94,-45,-50,-59,-64,-16,-18,-9,-93,-75,-81,-86,-91,-96,-20,-39,-30,-78,-83,-88,-98,-1,-11,-27,-43,-44,-60,-61,-51,-46,-62,-63,-74,-80,-85,-90,-95,-76,-82,-87,-92,-97,-21,-10,-26,-42,]),'KleeneC':([4,6,10,11,12,13,14,15,16,17,18,19,20,21,34,35,45,46,48,49,50,69,72,73,86,87,88,89,90,92,93,94,95,101,103,104,122,123,124,126,140,148,150,],[54,56,-12,-13,-14,-2,-15,-3,-4,-5,-6,-7,-8,-9,-17,-19,-40,-31,-52,-53,-47,-48,-70,-77,-45,-50,-59,-64,-16,-18,-9,56,54,-20,-39,-30,-51,-46,-62,-63,56,56,-21,]),'PositiveC':([4,6,10,11,12,13,14,15,16,17,18,19,20,21,34,35,45,46,48,49,50,69,72,73,86,87,88,89,90,92,93,94,95,101,103,104,122,123,124,126,140,148,150,],[55,57,-12,-13,-14,-2,-15,-3,-4,-5,-6,-7,-8,-9,-17,-19,-40,-31,-52,-53,-47,-48,-70,-77,-45,-50,-59,-64,-16,-18,-9,57,55,-20,-39,-30,-51,-46,-62,-63,57,57,-21,]),'Splitter':([10,11,12,13,14,15,16,17,18,19,20,28,29,30,31,32,34,35,45,46,48,49,50,69,72,73,76,77,78,79,80,83,84,86,87,88,89,90,92,93,96,97,98,99,100,101,103,104,109,110,111,113,114,115,116,122,123,124,126,137,138,139,140,141,143,144,145,146,147,148,149,150,151,152,153,],[-12,-13,-14,-2,-15,-3,-4,-5,-6,-7,-8,62,63,64,65,66,-17,-19,-40,-31,-52,-53,-47,-48,-70,-77,-73,-79,-84,-89,-94,125,127,-45,-50,-59,-64,-16,-18,-9,-75,-81,-86,-91,-96,-20,-39,-30,-1,-11,-27,-43,-44,-60,-61,-51,-46,-62,-63,-74,-80,-85,-90,-95,-71,-72,-76,-82,-87,-92,-97,-21,-10,-26,-42,]),'Pow':([10,11,12,34,35,38,45,46,48,49,50,69,90,92,101,103,104,122,123,124,126,150,],[-12,-13,-14,70,71,-48,-40,-31,-52,-53,-47,-48,70,71,-20,-39,-30,-51,-46,-62,-63,-21,]),'Concat':([10,11,12,13,14,34,35,38,45,46,48,49,50,69,90,92,101,103,104,122,123,124,126,150,],[-12,-13,-14,58,59,-17,-19,-48,-40,-31,-52,-53,-47,-48,-16,-18,-20,-39,-30,-51,-46,-62,-63,-21,]),'RGroup':([10,11,12,13,14,34,35,45,46,48,49,50,69,81,82,90,92,101,103,104,109,110,111,113,114,115,116,122,123,124,126,136,150,151,152,153,],[-12,-13,-14,-2,-15,-17,-19,-40,-31,-52,-53,-47,-48,122,123,-16,-18,-20,-39,-30,-1,-11,-27,-43,-44,-60,-61,-51,-46,-62,-63,153,-21,-10,-26,-42,]),'On':([10,11,12,14,35,46,50,67,69,92,101,104,123,150,],[-12,-13,-14,-15,-19,-31,-47,102,-48,-18,-20,-30,-46,-21,]),'CloseStruct':([10,11,12,14,35,46,50,69,83,84,92,101,104,123,143,144,150,],[-12,-13,-14,-15,-19,-31,-47,-48,124,126,-18,-20,-30,-46,-71,-72,-21,]),'Eq':([21,38,39,76,77,78,79,80,96,97,98,99,100,],[60,74,75,117,118,119,120,121,128,129,130,131,132,]),'VBoolean':([75,112,121,132,134,135,142,],[114,114,114,114,114,114,114,]),'True':([75,112,121,132,134,135,142,],[115,115,115,115,115,115,115,]),'False':([75,112,121,132,134,135,142,],[116,116,116,116,116,116,116,]),'Or':([110,111,113,114,115,116,152,153,],[134,-27,-43,-44,-60,-61,-26,-42,]),'And':([110,111,113,114,115,116,151,152,153,],[135,-27,-43,-44,-60,-61,135,135,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,22,],[2,52,61,]),'IntExpression':([0,1,22,54,55,56,57,70,71,75,118,129,],[3,3,3,86,87,88,89,103,104,106,138,146,]),'AlphExpression':([0,1,22,47,60,75,91,102,112,119,120,130,131,],[4,4,4,81,95,107,81,133,81,139,95,147,95,]),'StringExpression':([0,1,22,33,36,37,47,51,68,74,117,125,127,128,],[5,5,5,67,72,73,82,84,82,105,137,143,144,145,]),'LangExpression':([0,1,22,60,120,131,],[6,6,6,94,140,148,]),'ShowVal':([0,1,22,],[7,7,7,]),'Assigns':([0,1,22,],[8,8,8,]),'Declares':([0,1,22,],[9,9,9,]),'StringLen':([0,1,22,54,55,56,57,70,71,75,118,129,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'AlphConcat':([0,1,22,47,60,75,91,102,112,119,120,130,131,],[13,13,13,13,13,13,13,13,13,13,13,13,13,]),'StringConcat':([0,1,22,33,36,37,47,51,68,74,117,125,127,128,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'StringPrefix':([0,1,22,60,120,131,],[15,15,15,15,15,15,]),'StringSuffix':([0,1,22,60,120,131,],[16,16,16,16,16,16,]),'AlphKleeneC':([0,1,22,60,120,131,],[17,17,17,17,17,17,]),'AlphPositiveC':([0,1,22,60,120,131,],[18,18,18,18,18,18,]),'LangKleeneC':([0,1,22,60,120,131,],[19,19,19,19,19,19,]),'LangPositiveC':([0,1,22,60,120,131,],[20,20,20,20,20,20,]),'StringAssign':([0,1,22,],[23,23,23,]),'IntAssign':([0,1,22,],[24,24,24,]),'AlphAssign':([0,1,22,],[25,25,25,]),'LangAssign':([0,1,22,],[26,26,26,]),'BooleanAssign':([0,1,22,],[27,27,27,]),'StringDeclare':([0,1,22,],[28,28,28,]),'IntDeclare':([0,1,22,],[29,29,29,]),'AlphDeclare':([0,1,22,],[30,30,30,]),'LangDeclare':([0,1,22,],[31,31,31,]),'BooleanDeclare':([0,1,22,],[32,32,32,]),'AlphPow':([0,1,22,47,58,60,75,91,102,112,119,120,130,131,],[34,34,34,34,90,34,34,34,34,34,34,34,34,34,]),'StringPow':([0,1,22,33,36,37,47,51,59,68,74,117,125,127,128,],[35,35,35,35,35,35,35,35,92,35,35,35,35,35,35,]),'AlphGroup':([0,1,22,47,58,60,75,91,102,112,119,120,130,131,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'StringGroup':([0,1,22,33,36,37,47,51,59,68,74,117,125,127,128,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'Alph':([0,1,22,47,58,60,75,91,102,112,119,120,130,131,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'StringList':([51,],[83,]),'BooleanExpression':([75,112,121,132,142,],[108,136,141,149,136,]),'BooleanOr':([75,112,121,132,142,],[109,109,109,109,109,]),'BooleanAnd':([75,112,121,132,134,135,142,],[110,110,110,110,151,152,110,]),'BooleanGroup':([75,112,121,132,134,135,142,],[111,111,111,111,111,111,111,]),'Boolean':([75,112,121,132,134,135,142,],[113,113,113,113,113,113,113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',2),
  ('AlphExpression -> AlphConcat','AlphExpression',1,'p_AlphExpression','alph.py',5),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',6),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',7),
  ('LangExpression -> AlphKleeneC','LangExpression',1,'p_LangExpression','lang.py',8),
  ('LangExpression -> AlphPositiveC','LangExpression',1,'p_LangExpression','lang.py',9),
  ('LangExpression -> LangKleeneC','LangExpression',1,'p_LangExpression','lang.py',10),
  ('LangExpression -> LangPositiveC','LangExpression',1,'p_LangExpression','lang.py',11),
  ('LangExpression -> VLang','LangExpression',1,'p_LangExpression','lang.py',12),
  ('BooleanOr -> BooleanAnd Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',7),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',8),
  ('IntExpression -> Int','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',8),
  ('IntExpression -> VInt','IntExpression',1,'p_IntegerExpression','integers.py',9),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',7),
  ('AlphConcat -> AlphConcat Concat AlphPow','AlphConcat',3,'p_AlphConcat','alph.py',14),
  ('AlphConcat -> AlphPow','AlphConcat',1,'p_AlphConcat','alph.py',15),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',15),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',16),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',17),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',18),
  ('LangUnion -> LangUnion Add LangConcat','LangUnion',3,'p_LangUnion','lang.py',17),
  ('LangUnion -> LangConcat','LangUnion',1,'p_LangUnion','lang.py',18),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('BooleanAnd -> BooleanAnd And BooleanAnd','BooleanAnd',3,'p_BooleanAnd','boolean.py',19),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',20),
  ('LangConcat -> LangConcat Concat LangGroup','LangConcat',3,'p_LangConcat','lang.py',22),
  ('LangConcat -> LangGroup','LangConcat',1,'p_LangConcat','lang.py',23),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',24),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',25),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',29),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',30),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',31),
  ('expression -> Declares','expression',1,'p_expression','parser.py',32),
  ('AlphPow -> AlphPow Pow IntExpression','AlphPow',3,'p_AlphPow','alph.py',27),
  ('AlphPow -> AlphGroup','AlphPow',1,'p_AlphPow','alph.py',28),
  ('LangGroup -> LGroup LangExpression RGroup','LangGroup',3,'p_LangGroup','lang.py',27),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',31),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',32),
  ('BooleanGroup -> VBoolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',33),
  ('AlphKleeneC -> AlphExpression KleeneC IntExpression','AlphKleeneC',3,'p_AlphKleeneC','lang.py',31),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',34),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',35),
  ('StringGroup -> VString','StringGroup',1,'p_StringGroup','strings.py',36),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',35),
  ('AlphPositiveC -> AlphExpression PositiveC IntExpression','AlphPositiveC',3,'p_AlphPositiveC','lang.py',37),
  ('AlphGroup -> LGroup AlphExpression RGroup','AlphGroup',3,'p_AlphGroup','alph.py',38),
  ('AlphGroup -> Alph','AlphGroup',1,'p_AlphGroup','alph.py',39),
  ('AlphGroup -> VAlph','AlphGroup',1,'p_AlphGroup','alph.py',40),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',42),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',43),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',44),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',45),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',46),
  ('LangKleeneC -> LangExpression KleeneC IntExpression','LangKleeneC',3,'p_LangKleeneC','lang.py',43),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',44),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',45),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',49),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',50),
  ('LangPositiveC -> LangExpression PositiveC IntExpression','LangPositiveC',3,'p_LangPositiveC','lang.py',49),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',51),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',52),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',53),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',54),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',55),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',55),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',58),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',59),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',60),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',61),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',62),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',63),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',63),
  ('StringAssign -> VString Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',83),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',91),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',92),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',93),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',94),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',113),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',121),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',122),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',123),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',124),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',143),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',151),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',152),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',153),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',154),
  ('LangAssign -> VLang Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',173),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',182),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',183),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',184),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',185),
  ('BooleanAssign -> VarName Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',205),
]
