
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftAddSubleftConcatDivrightPowAdd AlphType And BooleanType CloseStruct Concat Div Eq False Int IntType KleeneC LGroup LangType LenOp NextLine On OpenStruct Or PositiveC Pow Prefix RGroup Show ShowInLine Splitter String StringType Sub SuchThat Suffix Term True VAlph VBoolean VInt VLang VString VarNameAlphExpression : AlphConcatBooleanExpression : BooleanOrLangExpression : StringPrefix\n    | StringSuffix\n    | AlphKleeneC\n    | AlphPositiveC\n    | LangKleeneC\n    | LangPositiveC\n    | LangUnionIntExpression : StringLen\n        | AddSubStringExpression : StringConcatBooleanOr : BooleanOr Or BooleanAnd\n                | BooleanAndStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpStringConcat : StringConcat Concat StringPow\n                    | StringPowAlphConcat : AlphConcat Concat AlphPow\n        | AlphPowexpressions : expressions expression Term\n                    | expression TermLangUnion : LangUnion Add LangConcat\n                | LangConcatBooleanAnd : BooleanAnd And BooleanGroup\n                    | BooleanGroupStringPow : StringPow Pow IntExpression\n                | StringGroup expression : IntExpression\n                    | AlphExpression\n                    | StringExpression\n                    | LangExpression\n                    | BooleanExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAddSub : AddSub Add MultDiv\n                | AddSub Sub MultDiv\n                | MultDivAlphPow : AlphPow Pow IntExpression\n            | AlphGroupLangConcat : LangConcat Concat LangGroup\n                | LangGroupStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VStringBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VBooleanShowVal : Show expression\n                | ShowInLine expressionAlphGroup : LGroup AlphExpression RGroup\n    | Alph\n    | VAlphMultDiv : MultDiv Concat IntPow\n                | MultDiv Div IntPow\n                | IntPowLangGroup : LGroup LangExpression RGroup\n    | VLangDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareBoolean : True\n                | FalseAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructAlphKleeneC : AlphExpression KleeneC IntExpressionAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignIntPow : IntPow Pow Unary\n                | UnaryStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionAlphPositiveC : AlphExpression PositiveC IntExpressionStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionLangKleeneC : LangExpression KleeneC IntExpressionUnary : Sub Primary\n            | PrimaryLangPositiveC : LangExpression PositiveC IntExpressionPrimary : LGroup IntExpression RGroup\n                | VInt\n                | IntStringPrefix : Prefix StringExpressionStringSuffix : Suffix StringExpressionStringAssign : VString Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VLang Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VBoolean Eq BooleanExpression'
    
_lr_action_items = {'Show':([0,1,23,24,71,121,],[23,23,23,23,-22,-21,]),'ShowInLine':([0,1,23,24,71,121,],[24,24,24,24,-22,-21,]),'LenOp':([0,1,11,12,13,14,23,24,36,38,39,53,54,55,58,59,60,61,62,64,68,69,71,72,73,74,75,89,91,94,95,96,97,103,121,126,127,128,130,140,142,143,144,145,151,157,161,162,163,166,167,169,173,177,190,],[35,35,-10,-11,-1,-12,35,35,-39,-20,-18,-57,-41,-28,-76,35,-53,-54,-45,-86,-89,-90,-22,35,35,35,35,140,-46,-85,35,35,35,35,-21,-37,-38,-19,-17,-15,-55,-56,-40,-27,35,35,-75,-52,-44,-88,-67,-68,35,190,-16,]),'Prefix':([0,1,23,24,59,71,104,121,132,154,159,175,],[40,40,40,40,40,-22,40,-21,40,40,40,40,]),'Suffix':([0,1,23,24,59,71,104,121,132,154,159,175,],[41,41,41,41,41,-22,41,-21,41,41,41,41,]),'VString':([0,1,23,24,35,40,41,59,65,71,79,90,102,121,156,168,170,172,],[44,44,44,44,91,91,91,91,91,-22,91,91,91,-21,91,91,91,91,]),'VarName':([0,1,23,24,48,49,50,51,52,71,84,85,86,87,88,121,],[45,45,45,45,106,107,108,109,110,-22,135,136,137,138,139,-21,]),'VLang':([0,1,23,24,59,71,80,100,104,121,132,154,159,175,],[46,46,46,46,117,-22,117,117,117,-21,117,117,117,117,]),'VBoolean':([0,1,23,24,59,71,81,101,105,121,134,160,176,],[47,47,47,47,118,-22,118,118,118,-21,118,118,118,]),'StringType':([0,1,23,24,71,121,],[48,48,48,48,-22,-21,]),'IntType':([0,1,23,24,71,121,],[49,49,49,49,-22,-21,]),'AlphType':([0,1,23,24,71,121,],[50,50,50,50,-22,-21,]),'LangType':([0,1,23,24,71,121,],[51,51,51,51,-22,-21,]),'BooleanType':([0,1,23,24,71,121,],[52,52,52,52,-22,-21,]),'LGroup':([0,1,23,24,35,37,40,41,59,65,71,72,73,74,75,76,77,78,79,80,81,90,92,93,95,96,97,100,101,102,103,104,105,111,121,129,132,134,141,151,154,156,157,158,159,160,168,170,172,173,174,175,176,],[59,59,59,59,90,95,90,90,59,90,-22,95,95,95,95,95,95,129,90,132,134,90,95,95,95,95,95,132,134,90,151,154,134,95,-21,129,154,134,129,151,154,90,95,129,154,134,90,90,90,95,129,154,134,]),'VAlph':([0,1,23,24,59,71,78,103,104,121,129,132,141,151,154,158,159,174,175,],[61,61,61,61,61,-22,61,61,61,-21,61,61,61,61,61,61,61,61,61,]),'String':([0,1,23,24,35,40,41,59,65,71,79,90,102,121,156,168,170,172,],[62,62,62,62,62,62,62,62,62,-22,62,62,62,-21,62,62,62,62,]),'Sub':([0,1,12,23,24,36,53,58,59,64,68,69,71,72,73,74,75,76,77,92,93,94,95,96,97,103,111,121,126,127,142,143,151,157,161,166,173,],[37,37,77,37,37,-39,-57,-76,37,-86,-89,-90,-22,37,37,37,37,37,37,37,37,-85,37,37,37,37,37,-21,-37,-38,-55,-56,37,37,-75,-88,37,]),'OpenStruct':([0,1,23,24,59,71,78,103,104,121,129,132,141,151,154,158,159,174,175,],[65,65,65,65,65,-22,65,65,65,-21,65,65,65,65,65,65,65,65,65,]),'True':([0,1,23,24,59,71,81,101,105,121,134,160,176,],[66,66,66,66,66,-22,66,66,66,-21,66,66,66,]),'False':([0,1,23,24,59,71,81,101,105,121,134,160,176,],[67,67,67,67,67,-22,67,67,67,-21,67,67,67,]),'VInt':([0,1,23,24,37,59,71,72,73,74,75,76,77,92,93,95,96,97,103,111,121,151,157,173,],[68,68,68,68,68,68,-22,68,68,68,68,68,68,68,68,68,68,68,68,68,-21,68,68,68,]),'Int':([0,1,23,24,37,59,71,72,73,74,75,76,77,92,93,95,96,97,103,111,121,151,157,173,],[69,69,69,69,69,69,-22,69,69,69,69,69,69,69,69,69,69,69,69,69,-21,69,69,69,]),'$end':([1,71,121,],[0,-22,-21,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,25,26,27,28,29,30,31,32,33,34,36,38,39,42,43,44,46,47,53,54,55,56,57,58,60,61,62,63,64,66,67,68,69,70,82,83,91,94,98,99,106,107,108,109,110,117,118,122,123,124,125,126,127,128,130,131,133,135,136,137,138,139,140,142,143,144,145,146,147,148,149,150,152,155,161,162,163,164,165,166,167,169,178,179,180,181,182,185,186,187,188,189,190,],[71,-29,-30,-31,-32,-33,-34,-35,-36,-10,-11,-1,-12,-3,-4,-5,-6,-7,-8,-9,-2,-70,-71,-72,-73,-74,-60,-61,-62,-63,-64,-39,-20,-18,-24,-14,-46,-59,-49,-57,-41,-28,-43,-26,-76,-53,-54,-45,-48,-86,-65,-66,-89,-90,121,-50,-51,-46,-85,-91,-92,-80,-94,-99,-104,-109,-59,-49,-69,-79,-84,-87,-37,-38,-19,-17,-23,-13,-82,-96,-101,-106,-111,-15,-55,-56,-40,-27,-42,-25,-93,-98,-103,-108,-113,-75,-52,-44,-58,-47,-88,-67,-68,-81,-95,-100,-105,-110,-83,-97,-102,-107,-112,-16,]),'KleeneC':([4,6,11,12,13,14,15,16,17,18,19,20,21,36,38,39,42,46,53,54,55,56,58,60,61,62,64,68,69,91,94,98,99,112,114,117,122,123,124,125,126,127,128,130,131,140,142,143,144,145,146,152,153,161,162,163,164,166,167,169,181,188,190,],[72,74,-10,-11,-1,-12,-3,-4,-5,-6,-7,-8,-9,-39,-20,-18,-24,-59,-57,-41,-28,-43,-76,-53,-54,-45,-86,-89,-90,-46,-85,-91,-92,72,74,-59,-69,-79,-84,-87,-37,-38,-19,-17,-23,-15,-55,-56,-40,-27,-42,74,72,-75,-52,-44,-58,-88,-67,-68,74,74,-16,]),'PositiveC':([4,6,11,12,13,14,15,16,17,18,19,20,21,36,38,39,42,46,53,54,55,56,58,60,61,62,64,68,69,91,94,98,99,112,114,117,122,123,124,125,126,127,128,130,131,140,142,143,144,145,146,152,153,161,162,163,164,166,167,169,181,188,190,],[73,75,-10,-11,-1,-12,-3,-4,-5,-6,-7,-8,-9,-39,-20,-18,-24,-59,-57,-41,-28,-43,-76,-53,-54,-45,-86,-89,-90,-46,-85,-91,-92,73,75,-59,-69,-79,-84,-87,-37,-38,-19,-17,-23,-15,-55,-56,-40,-27,-42,75,73,-75,-52,-44,-58,-88,-67,-68,75,75,-16,]),'RGroup':([11,12,13,14,15,16,17,18,19,20,21,22,36,38,39,42,43,53,54,55,56,57,58,60,61,62,63,64,66,67,68,69,91,94,98,99,112,113,114,115,116,117,118,122,123,124,125,126,127,128,130,131,133,140,142,143,144,145,146,147,161,162,163,164,165,166,167,169,171,190,],[-10,-11,-1,-12,-3,-4,-5,-6,-7,-8,-9,-2,-39,-20,-18,-24,-14,-57,-41,-28,-43,-26,-76,-53,-54,-45,-48,-86,-65,-66,-89,-90,-46,-85,-91,-92,162,163,164,165,166,-59,-49,-69,-79,-84,-87,-37,-38,-19,-17,-23,-13,-15,-55,-56,-40,-27,-42,-25,-75,-52,-44,-58,-47,-88,-67,-68,162,-16,]),'Splitter':([11,12,13,14,15,16,17,18,19,20,21,22,30,31,32,33,34,36,38,39,42,43,53,54,55,56,57,58,60,61,62,63,64,66,67,68,69,91,94,98,99,106,107,108,109,110,117,118,119,120,122,123,124,125,126,127,128,130,131,133,135,136,137,138,139,140,142,143,144,145,146,147,161,162,163,164,165,166,167,169,178,179,180,181,182,183,184,185,186,187,188,189,190,],[-10,-11,-1,-12,-3,-4,-5,-6,-7,-8,-9,-2,84,85,86,87,88,-39,-20,-18,-24,-14,-57,-41,-28,-43,-26,-76,-53,-54,-45,-48,-86,-65,-66,-89,-90,-46,-85,-91,-92,-80,-94,-99,-104,-109,-59,-49,168,170,-69,-79,-84,-87,-37,-38,-19,-17,-23,-13,-82,-96,-101,-106,-111,-15,-55,-56,-40,-27,-42,-25,-75,-52,-44,-58,-47,-88,-67,-68,-81,-95,-100,-105,-110,-77,-78,-83,-97,-102,-107,-112,-16,]),'Pow':([11,12,36,38,39,44,53,54,55,58,60,61,62,64,68,69,91,94,126,127,128,130,140,142,143,144,145,161,162,163,166,167,169,190,],[-10,-11,-39,96,97,-46,111,-41,-28,-76,-53,-54,-45,-86,-89,-90,-46,-85,-37,-38,96,97,-15,111,111,-40,-27,-75,-52,-44,-88,-67,-68,-16,]),'Concat':([11,12,13,14,36,38,39,42,44,46,53,54,55,56,58,60,61,62,64,68,69,91,94,117,126,127,128,130,131,140,142,143,144,145,146,161,162,163,164,166,167,169,190,],[-10,-11,78,79,92,-20,-18,100,-46,-59,-57,-41,-28,-43,-76,-53,-54,-45,-86,-89,-90,-46,-85,-59,92,92,-19,-17,100,-15,-55,-56,-40,-27,-42,-75,-52,-44,-58,-88,-67,-68,-16,]),'On':([11,12,14,36,39,53,55,58,62,64,68,69,89,91,94,126,127,130,140,142,143,145,161,163,166,190,],[-10,-11,-12,-39,-18,-57,-28,-76,-45,-86,-89,-90,141,-46,-85,-37,-38,-17,-15,-55,-56,-27,-75,-44,-88,-16,]),'CloseStruct':([11,12,14,36,39,53,55,58,62,64,68,69,91,94,119,120,126,127,130,140,142,143,145,161,163,166,183,184,190,],[-10,-11,-12,-39,-18,-57,-28,-76,-45,-86,-89,-90,-46,-85,167,169,-37,-38,-17,-15,-55,-56,-27,-75,-44,-88,-77,-78,-16,]),'Add':([12,21,36,42,46,53,56,58,64,68,69,94,117,126,127,131,142,143,146,161,164,166,],[76,80,-39,-24,-59,-57,-43,-76,-86,-89,-90,-85,-59,-37,-38,-23,-55,-56,-42,-75,-58,-88,]),'Or':([22,43,47,57,63,66,67,118,133,147,165,],[81,-14,-49,-26,-48,-65,-66,-49,-13,-25,-47,]),'Div':([36,53,58,64,68,69,94,126,127,142,143,161,166,],[93,-57,-76,-86,-89,-90,-85,93,93,-55,-56,-75,-88,]),'And':([43,47,57,63,66,67,118,133,147,165,],[101,-49,-26,-48,-65,-66,-49,101,-25,-47,]),'Eq':([44,45,46,47,106,107,108,109,110,135,136,137,138,139,],[102,103,104,105,156,157,158,159,160,172,173,174,175,176,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,23,24,],[2,70,82,83,]),'IntExpression':([0,1,23,24,59,72,73,74,75,95,96,97,103,151,157,173,],[3,3,3,3,116,122,123,124,125,116,144,145,149,116,179,186,]),'AlphExpression':([0,1,23,24,59,103,104,129,132,141,151,154,158,159,174,175,],[4,4,4,4,112,150,153,171,153,177,171,112,180,153,187,153,]),'StringExpression':([0,1,23,24,35,40,41,59,65,90,102,156,168,170,172,],[5,5,5,5,89,98,99,113,120,113,148,178,183,184,185,]),'LangExpression':([0,1,23,24,59,104,132,154,159,175,],[6,6,6,6,114,152,114,114,181,188,]),'BooleanExpression':([0,1,23,24,59,105,134,160,176,],[7,7,7,7,115,155,115,182,189,]),'ShowVal':([0,1,23,24,],[8,8,8,8,]),'Assigns':([0,1,23,24,],[9,9,9,9,]),'Declares':([0,1,23,24,],[10,10,10,10,]),'StringLen':([0,1,23,24,59,72,73,74,75,95,96,97,103,151,157,173,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'AddSub':([0,1,23,24,59,72,73,74,75,95,96,97,103,151,157,173,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'AlphConcat':([0,1,23,24,59,103,104,129,132,141,151,154,158,159,174,175,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'StringConcat':([0,1,23,24,35,40,41,59,65,90,102,156,168,170,172,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'StringPrefix':([0,1,23,24,59,104,132,154,159,175,],[15,15,15,15,15,15,15,15,15,15,]),'StringSuffix':([0,1,23,24,59,104,132,154,159,175,],[16,16,16,16,16,16,16,16,16,16,]),'AlphKleeneC':([0,1,23,24,59,104,132,154,159,175,],[17,17,17,17,17,17,17,17,17,17,]),'AlphPositiveC':([0,1,23,24,59,104,132,154,159,175,],[18,18,18,18,18,18,18,18,18,18,]),'LangKleeneC':([0,1,23,24,59,104,132,154,159,175,],[19,19,19,19,19,19,19,19,19,19,]),'LangPositiveC':([0,1,23,24,59,104,132,154,159,175,],[20,20,20,20,20,20,20,20,20,20,]),'LangUnion':([0,1,23,24,59,104,132,154,159,175,],[21,21,21,21,21,21,21,21,21,21,]),'BooleanOr':([0,1,23,24,59,105,134,160,176,],[22,22,22,22,22,22,22,22,22,]),'StringAssign':([0,1,23,24,],[25,25,25,25,]),'IntAssign':([0,1,23,24,],[26,26,26,26,]),'AlphAssign':([0,1,23,24,],[27,27,27,27,]),'LangAssign':([0,1,23,24,],[28,28,28,28,]),'BooleanAssign':([0,1,23,24,],[29,29,29,29,]),'StringDeclare':([0,1,23,24,],[30,30,30,30,]),'IntDeclare':([0,1,23,24,],[31,31,31,31,]),'AlphDeclare':([0,1,23,24,],[32,32,32,32,]),'LangDeclare':([0,1,23,24,],[33,33,33,33,]),'BooleanDeclare':([0,1,23,24,],[34,34,34,34,]),'MultDiv':([0,1,23,24,59,72,73,74,75,76,77,95,96,97,103,151,157,173,],[36,36,36,36,36,36,36,36,36,126,127,36,36,36,36,36,36,36,]),'AlphPow':([0,1,23,24,59,78,103,104,129,132,141,151,154,158,159,174,175,],[38,38,38,38,38,128,38,38,38,38,38,38,38,38,38,38,38,]),'StringPow':([0,1,23,24,35,40,41,59,65,79,90,102,156,168,170,172,],[39,39,39,39,39,39,39,39,39,130,39,39,39,39,39,39,]),'LangConcat':([0,1,23,24,59,80,104,132,154,159,175,],[42,42,42,42,42,131,42,42,42,42,42,]),'BooleanAnd':([0,1,23,24,59,81,105,134,160,176,],[43,43,43,43,43,133,43,43,43,43,]),'IntPow':([0,1,23,24,59,72,73,74,75,76,77,92,93,95,96,97,103,151,157,173,],[53,53,53,53,53,53,53,53,53,53,53,142,143,53,53,53,53,53,53,53,]),'AlphGroup':([0,1,23,24,59,78,103,104,129,132,141,151,154,158,159,174,175,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'StringGroup':([0,1,23,24,35,40,41,59,65,79,90,102,156,168,170,172,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'LangGroup':([0,1,23,24,59,80,100,104,132,154,159,175,],[56,56,56,56,56,56,146,56,56,56,56,56,]),'BooleanGroup':([0,1,23,24,59,81,101,105,134,160,176,],[57,57,57,57,57,57,147,57,57,57,57,]),'Unary':([0,1,23,24,59,72,73,74,75,76,77,92,93,95,96,97,103,111,151,157,173,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,161,58,58,58,]),'Alph':([0,1,23,24,59,78,103,104,129,132,141,151,154,158,159,174,175,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'Boolean':([0,1,23,24,59,81,101,105,134,160,176,],[63,63,63,63,63,63,63,63,63,63,63,]),'Primary':([0,1,23,24,37,59,72,73,74,75,76,77,92,93,95,96,97,103,111,151,157,173,],[64,64,64,64,94,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'StringList':([65,],[119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('AlphExpression -> AlphConcat','AlphExpression',1,'p_AlphExpression','alph.py',5),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',5),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',6),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',7),
  ('LangExpression -> AlphKleeneC','LangExpression',1,'p_LangExpression','lang.py',8),
  ('LangExpression -> AlphPositiveC','LangExpression',1,'p_LangExpression','lang.py',9),
  ('LangExpression -> LangKleeneC','LangExpression',1,'p_LangExpression','lang.py',10),
  ('LangExpression -> LangPositiveC','LangExpression',1,'p_LangExpression','lang.py',11),
  ('LangExpression -> LangUnion','LangExpression',1,'p_LangExpression','lang.py',12),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('IntExpression -> AddSub','IntExpression',1,'p_IntegerExpression','integers.py',8),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',8),
  ('BooleanOr -> BooleanOr Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',10),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',11),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',13),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',14),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',13),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',14),
  ('AlphConcat -> AlphConcat Concat AlphPow','AlphConcat',3,'p_AlphConcat','alph.py',14),
  ('AlphConcat -> AlphPow','AlphConcat',1,'p_AlphConcat','alph.py',15),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('LangUnion -> LangUnion Add LangConcat','LangUnion',3,'p_LangUnion','lang.py',20),
  ('LangUnion -> LangConcat','LangUnion',1,'p_LangUnion','lang.py',21),
  ('BooleanAnd -> BooleanAnd And BooleanGroup','BooleanAnd',3,'p_BooleanAnd','boolean.py',22),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',23),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',22),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',23),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',29),
  ('expression -> BooleanExpression','expression',1,'p_expression','parser.py',30),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',31),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',32),
  ('expression -> Declares','expression',1,'p_expression','parser.py',33),
  ('AddSub -> AddSub Add MultDiv','AddSub',3,'p_IntAddSub','integers.py',26),
  ('AddSub -> AddSub Sub MultDiv','AddSub',3,'p_IntAddSub','integers.py',27),
  ('AddSub -> MultDiv','AddSub',1,'p_IntAddSub','integers.py',28),
  ('AlphPow -> AlphPow Pow IntExpression','AlphPow',3,'p_AlphPow','alph.py',27),
  ('AlphPow -> AlphGroup','AlphPow',1,'p_AlphPow','alph.py',28),
  ('LangConcat -> LangConcat Concat LangGroup','LangConcat',3,'p_LangConcat','lang.py',32),
  ('LangConcat -> LangGroup','LangConcat',1,'p_LangConcat','lang.py',33),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',32),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',33),
  ('StringGroup -> VString','StringGroup',1,'p_StringGroup','strings.py',34),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',34),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',35),
  ('BooleanGroup -> VBoolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',36),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',35),
  ('ShowVal -> ShowInLine expression','ShowVal',2,'p_ShowVal','instructions.py',36),
  ('AlphGroup -> LGroup AlphExpression RGroup','AlphGroup',3,'p_AlphGroup','alph.py',38),
  ('AlphGroup -> Alph','AlphGroup',1,'p_AlphGroup','alph.py',39),
  ('AlphGroup -> VAlph','AlphGroup',1,'p_AlphGroup','alph.py',40),
  ('MultDiv -> MultDiv Concat IntPow','MultDiv',3,'p_IntMultDiv','integers.py',40),
  ('MultDiv -> MultDiv Div IntPow','MultDiv',3,'p_IntMultDiv','integers.py',41),
  ('MultDiv -> IntPow','MultDiv',1,'p_IntMultDiv','integers.py',42),
  ('LangGroup -> LGroup LangExpression RGroup','LangGroup',3,'p_LangGroup','lang.py',44),
  ('LangGroup -> VLang','LangGroup',1,'p_LangGroup','lang.py',45),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',46),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',47),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',48),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',49),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',50),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',47),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',48),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',49),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',50),
  ('AlphKleeneC -> AlphExpression KleeneC IntExpression','AlphKleeneC',3,'p_AlphKleeneC','lang.py',54),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',55),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',56),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',57),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',58),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',59),
  ('IntPow -> IntPow Pow Unary','IntPow',3,'p_IntPow','integers.py',57),
  ('IntPow -> Unary','IntPow',1,'p_IntPow','integers.py',58),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',58),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',59),
  ('AlphPositiveC -> AlphExpression PositiveC IntExpression','AlphPositiveC',3,'p_AlphPositiveC','lang.py',60),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',64),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',65),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',66),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',67),
  ('LangKleeneC -> LangExpression KleeneC IntExpression','LangKleeneC',3,'p_LangKleeneC','lang.py',66),
  ('Unary -> Sub Primary','Unary',2,'p_IntUnary','integers.py',67),
  ('Unary -> Primary','Unary',1,'p_IntUnary','integers.py',68),
  ('LangPositiveC -> LangExpression PositiveC IntExpression','LangPositiveC',3,'p_LangPositiveC','lang.py',72),
  ('Primary -> LGroup IntExpression RGroup','Primary',3,'p_IntPrimary','integers.py',76),
  ('Primary -> VInt','Primary',1,'p_IntPrimary','integers.py',77),
  ('Primary -> Int','Primary',1,'p_IntPrimary','integers.py',78),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',78),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',86),
  ('StringAssign -> VString Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',87),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',95),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',96),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',97),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',98),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',117),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',125),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',126),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',127),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',128),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',147),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',155),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',156),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',157),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',158),
  ('LangAssign -> VLang Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',177),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',186),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',187),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',188),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',189),
  ('BooleanAssign -> VBoolean Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',209),
]
