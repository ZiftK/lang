
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAdd AlphType And BooleanType CloseStruct Concat Div Eq False Int IntType LGroup LangType LenOp NextLine On OpenStruct Or Pow Prefix RGroup Show Splitter String StringType Sub SuchThat Suffix Term True VarNameAlphExpression : Alph\n    | VarValueBooleanExpression : BooleanOrLangExpression : StringPrefix\n    | StringSuffixIntExpression : StringLen\n        | AddSubStringExpression : StringConcatVarValue : VarNameBooleanOr : BooleanAnd Or BooleanAnd\n                | BooleanAndAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructLang :  OpenStruct VarName SuchThat StringConcat : StringConcat Concat StringPow\n                    | StringPowStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpStringPrefix : Prefix StringExpressionStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionexpressions : expressions expression Term\n                    | expression TermBooleanAnd : BooleanAnd And BooleanAnd\n                    | BooleanGroupStringSuffix : Suffix StringExpressionStringPow : StringPow Pow IntExpression\n                | StringGroup expression : StringExpression\n                    | IntExpression\n                    | AlphExpression\n                    | LangExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAddSub : MultDiv Add AddSub\n                | MultDiv Sub AddSub\n                | MultDivShowVal : Show expressionStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VarValueBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VarValueDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareMultDiv : MultDiv Concat Unary\n                | MultDiv Div Unary\n                | UnaryBoolean : True\n                | FalseAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionUnary : Sub Primary\n               | PrimaryPrimary : LGroup IntExpression RGroup\n                | VarValue\n                | IntStringAssign : VarName Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VarName Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VarName Eq BooleanExpression'
    
_lr_action_items = {'Show':([0,1,17,48,81,],[17,17,17,-23,-22,]),'LenOp':([0,1,10,11,12,13,17,28,30,41,42,43,44,45,46,48,56,57,59,60,65,66,67,70,81,82,88,89,91,92,93,94,95,97,108,113,117,118,120,124,125,144,],[29,29,-8,-6,-7,-1,29,-16,-38,-28,-53,29,-41,-66,-69,-23,29,89,-42,-9,-65,29,-68,29,-22,-15,-27,-17,-36,-37,-51,-52,-12,-13,29,29,-40,-67,29,144,-2,-18,]),'OpenStruct':([0,1,17,48,70,81,90,114,121,],[32,32,32,-23,32,-22,32,32,32,]),'VarName':([0,1,17,29,31,32,34,35,36,37,38,39,40,43,48,49,51,52,53,54,55,56,58,61,62,63,64,66,70,81,90,96,98,108,112,113,114,116,119,120,121,123,128,129,137,],[33,33,33,60,60,60,60,60,73,74,75,76,77,60,-23,60,83,84,85,86,87,60,60,60,60,60,60,60,60,-22,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'Prefix':([0,1,17,48,70,81,115,122,],[34,34,34,-23,34,-22,34,34,]),'Suffix':([0,1,17,48,70,81,115,122,],[35,35,35,-23,35,-22,35,35,]),'StringType':([0,1,17,48,81,],[36,36,36,-23,-22,]),'IntType':([0,1,17,48,81,],[37,37,37,-23,-22,]),'AlphType':([0,1,17,48,81,],[38,38,38,-23,-22,]),'LangType':([0,1,17,48,81,],[39,39,39,-23,-22,]),'BooleanType':([0,1,17,48,81,],[40,40,40,-23,-22,]),'LGroup':([0,1,17,29,31,32,34,35,43,48,49,56,58,61,62,63,64,66,70,81,96,98,108,112,113,116,119,120,123,128,129,137,],[43,43,43,58,66,58,58,58,43,-23,58,66,58,66,66,66,66,66,108,-22,58,58,108,58,66,137,58,66,137,137,137,137,]),'String':([0,1,17,29,32,34,35,43,48,49,58,70,81,96,98,108,112,119,],[44,44,44,44,44,44,44,44,-23,44,44,44,-22,44,44,44,44,44,]),'Sub':([0,1,14,17,30,33,42,43,45,46,48,56,60,61,62,63,64,65,66,67,70,80,81,93,94,104,108,113,118,120,131,],[31,31,-68,31,62,-9,-53,31,-66,-69,-23,31,-9,31,31,31,31,-65,31,-68,31,-68,-22,-51,-52,-68,31,31,-67,31,-68,]),'Int':([0,1,17,31,43,48,56,61,62,63,64,66,70,81,108,113,120,],[46,46,46,46,46,-23,46,46,46,46,46,46,46,-22,46,46,46,]),'$end':([1,48,81,],[0,-23,-22,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,27,28,30,33,41,42,44,45,46,47,50,59,60,65,67,71,72,73,74,75,76,77,82,83,84,85,86,87,88,89,91,92,93,94,95,97,99,100,101,102,103,104,105,106,107,109,110,111,117,118,125,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,],[48,-29,-30,-31,-32,-33,-34,-35,-8,-6,-7,-1,-2,-4,-5,-56,-57,-58,-59,-60,-46,-47,-48,-49,-50,-16,-38,-9,-28,-53,-41,-66,-69,81,-39,-42,-9,-65,-68,-19,-26,-61,-71,-76,-81,-86,-15,-63,-73,-78,-83,-88,-27,-17,-36,-37,-51,-52,-12,-13,-70,-75,-80,-85,-90,-2,-3,-11,-25,-44,-54,-55,-40,-67,-2,-62,-72,-77,-82,-87,-45,-64,-74,-79,-84,-89,-18,-10,-24,-43,]),'On':([10,11,12,28,30,41,42,44,45,46,57,59,60,65,67,82,88,89,91,92,93,94,117,118,144,],[-8,-6,-7,-16,-38,-28,-53,-41,-66,-69,90,-42,-9,-65,-68,-15,-27,-17,-36,-37,-51,-52,-40,-67,-18,]),'CloseStruct':([10,11,12,28,30,41,42,44,45,46,59,60,65,67,68,69,82,88,89,91,92,93,94,117,118,126,127,144,],[-8,-6,-7,-16,-38,-28,-53,-41,-66,-69,-42,-9,-65,-68,95,97,-15,-27,-17,-36,-37,-51,-52,-40,-67,-20,-21,-18,]),'Splitter':([10,11,12,13,15,16,23,24,25,26,27,28,30,41,42,44,45,46,59,60,65,67,68,69,71,72,73,74,75,76,77,82,83,84,85,86,87,88,89,91,92,93,94,95,97,105,106,107,109,110,111,117,118,125,126,127,132,133,134,135,136,138,139,140,141,142,143,144,145,146,147,],[-8,-6,-7,-1,-4,-5,51,52,53,54,55,-16,-38,-28,-53,-41,-66,-69,-42,-9,-65,-68,96,98,-19,-26,-61,-71,-76,-81,-86,-15,-63,-73,-78,-83,-88,-27,-17,-36,-37,-51,-52,-12,-13,-3,-11,-25,-44,-54,-55,-40,-67,-2,-20,-21,-62,-72,-77,-82,-87,-45,-64,-74,-79,-84,-89,-18,-10,-24,-43,]),'RGroup':([10,11,12,28,30,41,42,44,45,46,59,60,65,67,78,79,80,82,88,89,91,92,93,94,105,106,107,109,110,111,117,118,130,131,138,144,145,146,147,],[-8,-6,-7,-16,-38,-28,-53,-41,-66,-69,-42,-9,-65,-68,117,118,-42,-15,-27,-17,-36,-37,-51,-52,-3,-11,-25,-44,-54,-55,-40,-67,147,-42,-45,-18,-10,-24,-43,]),'Concat':([10,11,12,14,28,30,33,41,42,44,45,46,59,60,65,67,80,82,88,89,91,92,93,94,104,117,118,131,144,],[49,-6,-7,-42,-16,63,-9,-28,-53,-41,-66,-69,-42,-9,-65,-68,-42,-15,-27,-17,-36,-37,-51,-52,-42,-40,-67,-42,-18,]),'Pow':([11,12,14,28,30,33,41,42,44,45,46,59,60,65,67,80,82,88,89,91,92,93,94,104,117,118,131,144,],[-6,-7,-42,56,-38,-9,-28,-53,-41,-66,-69,-42,-9,-65,-68,-42,56,-27,-17,-36,-37,-51,-52,-42,-40,-67,-42,-18,]),'Add':([14,30,33,42,45,46,60,65,67,80,93,94,104,118,131,],[-68,61,-9,-53,-66,-69,-9,-65,-68,-68,-51,-52,-68,-67,-68,]),'Div':([14,30,33,42,45,46,60,65,67,80,93,94,104,118,131,],[-68,64,-9,-53,-66,-69,-9,-65,-68,-68,-51,-52,-68,-67,-68,]),'Eq':([33,73,74,75,76,77,83,84,85,86,87,],[70,112,113,114,115,116,119,120,121,122,123,]),'Or':([60,104,106,107,109,110,111,131,138,146,147,],[-9,-45,128,-25,-44,-54,-55,-45,-45,-24,-43,]),'And':([60,104,106,107,109,110,111,131,138,145,146,147,],[-9,-45,129,-25,-44,-54,-55,-45,-45,129,129,-43,]),'True':([70,108,116,123,128,129,137,],[110,110,110,110,110,110,110,]),'False':([70,108,116,123,128,129,137,],[111,111,111,111,111,111,111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,17,],[2,47,50,]),'StringExpression':([0,1,17,29,32,34,35,43,58,70,96,98,108,112,119,],[3,3,3,57,69,71,72,78,78,99,126,127,78,132,139,]),'IntExpression':([0,1,17,43,56,66,70,108,113,120,],[4,4,4,79,88,79,100,79,133,140,]),'AlphExpression':([0,1,17,70,90,114,121,],[5,5,5,101,124,134,141,]),'LangExpression':([0,1,17,70,115,122,],[6,6,6,102,135,142,]),'ShowVal':([0,1,17,],[7,7,7,]),'Assigns':([0,1,17,],[8,8,8,]),'Declares':([0,1,17,],[9,9,9,]),'StringConcat':([0,1,17,29,32,34,35,43,58,70,96,98,108,112,119,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'StringLen':([0,1,17,43,56,66,70,108,113,120,],[11,11,11,11,11,11,11,11,11,11,]),'AddSub':([0,1,17,43,56,61,62,66,70,108,113,120,],[12,12,12,12,12,91,92,12,12,12,12,12,]),'Alph':([0,1,17,70,90,114,121,],[13,13,13,13,13,13,13,]),'VarValue':([0,1,17,29,31,32,34,35,43,49,56,58,61,62,63,64,66,70,90,96,98,108,112,113,114,116,119,120,121,123,128,129,137,],[14,14,14,59,67,59,59,59,80,59,67,59,67,67,67,67,67,104,125,59,59,131,59,67,125,138,59,67,125,138,138,138,138,]),'StringPrefix':([0,1,17,70,115,122,],[15,15,15,15,15,15,]),'StringSuffix':([0,1,17,70,115,122,],[16,16,16,16,16,16,]),'StringAssign':([0,1,17,],[18,18,18,]),'IntAssign':([0,1,17,],[19,19,19,]),'AlphAssign':([0,1,17,],[20,20,20,]),'LangAssign':([0,1,17,],[21,21,21,]),'BooleanAssign':([0,1,17,],[22,22,22,]),'StringDeclare':([0,1,17,],[23,23,23,]),'IntDeclare':([0,1,17,],[24,24,24,]),'AlphDeclare':([0,1,17,],[25,25,25,]),'LangDeclare':([0,1,17,],[26,26,26,]),'BooleanDeclare':([0,1,17,],[27,27,27,]),'StringPow':([0,1,17,29,32,34,35,43,49,58,70,96,98,108,112,119,],[28,28,28,28,28,28,28,28,82,28,28,28,28,28,28,28,]),'MultDiv':([0,1,17,43,56,61,62,66,70,108,113,120,],[30,30,30,30,30,30,30,30,30,30,30,30,]),'StringGroup':([0,1,17,29,32,34,35,43,49,58,70,96,98,108,112,119,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'Unary':([0,1,17,43,56,61,62,63,64,66,70,108,113,120,],[42,42,42,42,42,42,42,93,94,42,42,42,42,42,]),'Primary':([0,1,17,31,43,56,61,62,63,64,66,70,108,113,120,],[45,45,45,65,45,45,45,45,45,45,45,45,45,45,45,]),'StringList':([32,],[68,]),'BooleanExpression':([70,108,116,123,137,],[103,130,136,143,130,]),'BooleanOr':([70,108,116,123,137,],[105,105,105,105,105,]),'BooleanAnd':([70,108,116,123,128,129,137,],[106,106,106,106,145,146,106,]),'BooleanGroup':([70,108,116,123,128,129,137,],[107,107,107,107,107,107,107,]),'Boolean':([70,108,116,123,128,129,137,],[109,109,109,109,109,109,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('AlphExpression -> Alph','AlphExpression',1,'p_AlphExpression','alph.py',2),
  ('AlphExpression -> VarValue','AlphExpression',1,'p_AlphExpression','alph.py',3),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',2),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',2),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',3),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',5),
  ('IntExpression -> AddSub','IntExpression',1,'p_IntegerExpression','integers.py',6),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',5),
  ('VarValue -> VarName','VarValue',1,'p_VarValue','variables.py',5),
  ('BooleanOr -> BooleanAnd Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',7),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',8),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',8),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',9),
  ('Lang -> OpenStruct VarName SuchThat','Lang',3,'p_Lang','lang.py',8),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',10),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',11),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',11),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',12),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',11),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',17),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',18),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('BooleanAnd -> BooleanAnd And BooleanAnd','BooleanAnd',3,'p_BooleanAnd','boolean.py',19),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',20),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',19),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',19),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',20),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',29),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',30),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',31),
  ('expression -> Declares','expression',1,'p_expression','parser.py',32),
  ('AddSub -> MultDiv Add AddSub','AddSub',3,'p_IntAddSub','integers.py',26),
  ('AddSub -> MultDiv Sub AddSub','AddSub',3,'p_IntAddSub','integers.py',27),
  ('AddSub -> MultDiv','AddSub',1,'p_IntAddSub','integers.py',28),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',27),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',29),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',30),
  ('StringGroup -> VarValue','StringGroup',1,'p_StringGroup','strings.py',31),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',31),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',32),
  ('BooleanGroup -> VarValue','BooleanGroup',1,'p_BooleanGroup','boolean.py',33),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',38),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',39),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',40),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',41),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',42),
  ('MultDiv -> MultDiv Concat Unary','MultDiv',3,'p_IntMultDiv','integers.py',41),
  ('MultDiv -> MultDiv Div Unary','MultDiv',3,'p_IntMultDiv','integers.py',42),
  ('MultDiv -> Unary','MultDiv',1,'p_IntMultDiv','integers.py',43),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',44),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',45),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',47),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',48),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',49),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',50),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',51),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',56),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',57),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',58),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',59),
  ('Unary -> Sub Primary','Unary',2,'p_IntUnary','integers.py',58),
  ('Unary -> Primary','Unary',1,'p_IntUnary','integers.py',59),
  ('Primary -> LGroup IntExpression RGroup','Primary',3,'p_IntPrimary','integers.py',67),
  ('Primary -> VarValue','Primary',1,'p_IntPrimary','integers.py',68),
  ('Primary -> Int','Primary',1,'p_IntPrimary','integers.py',69),
  ('StringAssign -> VarName Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',74),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',82),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',83),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',84),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',85),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',99),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',107),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',108),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',109),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',110),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',124),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',132),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',133),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',134),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',135),
  ('LangAssign -> VarName Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',149),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',157),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',158),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',159),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',160),
  ('BooleanAssign -> VarName Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',175),
]
