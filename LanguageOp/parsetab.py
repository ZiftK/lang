
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAlphType And BooleanType CloseStruct Concat Eq False Int IntType KleeneC LGroup LangType LenOp NextLine On OpenStruct Or PositiveC Pow Prefix RGroup Show Splitter String StringType SuchThat Suffix Term True VAlph VBoolean VInt VLang VString VarNameBooleanExpression : BooleanOrAlphExpression : AlphConcatIntExpression : Int\n        | StringLen\n        | VIntLangExpression : StringPrefix\n    | StringSuffix\n    | AlphKleeneC\n    | AlphPositiveC\n    | LangKleeneC\n    | LangPositiveC\n    | VLangBooleanOr : BooleanAnd Or BooleanAnd\n                | BooleanAndStringExpression : StringConcatStringConcat : StringConcat Concat StringPow\n                    | StringPowStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpAlphConcat : AlphConcat Concat AlphPow\n        | AlphPowAlphKleeneC : AlphExpression KleeneC IntExpressionexpressions : expressions expression Term\n                    | expression TermBooleanAnd : BooleanAnd And BooleanAnd\n                    | BooleanGroupStringPow : StringPow Pow IntExpression\n                | StringGroup AlphPositiveC : AlphExpression PositiveC IntExpressionexpression : IntExpression\n                    | AlphExpression\n                    | StringExpression\n                    | LangExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAlphPow : AlphPow Pow IntExpression\n            | AlphGroupShowVal : Show expressionLangKleeneC : LangExpression KleeneC IntExpressionBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VBooleanStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VStringDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareLangPositiveC : LangExpression PositiveC IntExpressionAlphGroup : LGroup AlphExpression RGroup\n    | Alph\n    | VAlphStringPrefix : Prefix StringExpressionAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignBoolean : True\n                | FalseAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructStringSuffix : Suffix StringExpressionStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionStringAssign : VarName Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VarName Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VarName Eq BooleanExpression'
    
_lr_action_items = {'Int':([0,1,22,53,54,55,56,57,68,69,72,82,113,124,],[10,10,10,-24,10,10,10,10,10,10,10,-23,10,10,]),'VInt':([0,1,22,53,54,55,56,57,68,69,72,82,113,124,],[12,12,12,-24,12,12,12,12,12,12,12,-23,12,12,]),'VLang':([0,1,22,53,72,82,115,126,],[21,21,21,-24,21,-23,21,21,]),'Show':([0,1,22,53,82,],[22,22,22,-24,-23,]),'LenOp':([0,1,10,11,12,13,14,22,34,35,44,45,47,48,49,50,53,54,55,56,57,66,68,69,72,82,87,89,95,97,98,113,117,118,119,121,124,128,146,],[33,33,-3,-4,-5,-2,-15,33,-21,-17,-38,-28,-54,-55,-45,-46,-24,33,33,33,33,95,33,33,33,-23,-20,-16,-18,-37,-27,33,-53,-44,-64,-65,33,146,-19,]),'Prefix':([0,1,22,53,72,82,115,126,],[36,36,36,-24,36,-23,36,36,]),'Suffix':([0,1,22,53,72,82,115,126,],[37,37,37,-24,37,-23,37,37,]),'VarName':([0,1,22,39,40,41,42,43,53,61,62,63,64,65,82,],[38,38,38,73,74,75,76,77,-24,90,91,92,93,94,-23,]),'StringType':([0,1,22,53,82,],[39,39,39,-24,-23,]),'IntType':([0,1,22,53,82,],[40,40,40,-24,-23,]),'AlphType':([0,1,22,53,82,],[41,41,41,-24,-23,]),'LangType':([0,1,22,53,82,],[42,42,42,-24,-23,]),'BooleanType':([0,1,22,53,82,],[43,43,43,-24,-23,]),'LGroup':([0,1,22,33,36,37,46,51,53,58,59,67,72,82,88,96,107,112,114,115,116,120,122,123,125,126,127,129,130,138,],[46,46,46,67,67,67,46,67,-24,88,67,67,107,-23,88,88,107,67,88,88,138,67,67,67,88,88,138,138,138,138,]),'VAlph':([0,1,22,46,53,58,72,82,88,96,107,114,115,125,126,],[48,48,48,48,-24,48,48,-23,48,48,48,48,48,48,48,]),'String':([0,1,22,33,36,37,46,51,53,59,67,72,82,107,112,120,122,123,],[49,49,49,49,49,49,49,49,-24,49,49,49,-23,49,49,49,49,49,]),'VString':([0,1,22,33,36,37,46,51,53,59,67,72,82,107,112,120,122,123,],[50,50,50,50,50,50,50,50,-24,50,50,50,-23,50,50,50,50,50,]),'OpenStruct':([0,1,22,46,53,58,72,82,88,96,107,114,115,125,126,],[51,51,51,51,-24,51,51,-23,51,51,51,51,51,51,51,]),'$end':([1,53,82,],[0,-24,-23,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,44,45,47,48,49,50,52,60,70,71,73,74,75,76,77,83,84,85,86,87,89,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,106,108,109,110,111,117,118,119,121,132,133,134,135,137,141,142,143,144,145,146,147,148,149,],[53,-30,-31,-32,-33,-34,-35,-36,-3,-4,-5,-2,-15,-6,-7,-8,-9,-10,-11,-12,-57,-58,-59,-60,-61,-47,-48,-49,-50,-51,-21,-17,-38,-28,-54,-55,-45,-46,82,-39,-56,-66,-67,-74,-79,-84,-89,-22,-29,-40,-52,-20,-16,-69,-76,-81,-86,-91,-18,-37,-27,-73,-78,-83,-88,-93,-1,-14,-26,-42,-43,-62,-63,-53,-44,-64,-65,-68,-75,-80,-85,-90,-70,-77,-82,-87,-92,-19,-13,-25,-41,]),'KleeneC':([4,6,10,11,12,13,14,15,16,17,18,19,20,21,34,35,44,45,47,48,49,50,70,71,83,84,85,86,87,89,95,97,98,101,102,117,118,119,121,135,136,144,146,],[54,56,-3,-4,-5,-2,-15,-6,-7,-8,-9,-10,-11,-12,-21,-17,-38,-28,-54,-55,-45,-46,-56,-66,-22,-29,-40,-52,-20,-16,-18,-37,-27,54,56,-53,-44,-64,-65,56,54,56,-19,]),'PositiveC':([4,6,10,11,12,13,14,15,16,17,18,19,20,21,34,35,44,45,47,48,49,50,70,71,83,84,85,86,87,89,95,97,98,101,102,117,118,119,121,135,136,144,146,],[55,57,-3,-4,-5,-2,-15,-6,-7,-8,-9,-10,-11,-12,-21,-17,-38,-28,-54,-55,-45,-46,-56,-66,-22,-29,-40,-52,-20,-16,-18,-37,-27,55,57,-53,-44,-64,-65,57,55,57,-19,]),'Splitter':([10,11,12,13,14,15,16,17,18,19,20,21,28,29,30,31,32,34,35,44,45,47,48,49,50,70,71,73,74,75,76,77,80,81,83,84,85,86,87,89,90,91,92,93,94,95,97,98,104,105,106,108,109,110,111,117,118,119,121,132,133,134,135,137,139,140,141,142,143,144,145,146,147,148,149,],[-3,-4,-5,-2,-15,-6,-7,-8,-9,-10,-11,-12,61,62,63,64,65,-21,-17,-38,-28,-54,-55,-45,-46,-56,-66,-67,-74,-79,-84,-89,120,122,-22,-29,-40,-52,-20,-16,-69,-76,-81,-86,-91,-18,-37,-27,-1,-14,-26,-42,-43,-62,-63,-53,-44,-64,-65,-68,-75,-80,-85,-90,-71,-72,-70,-77,-82,-87,-92,-19,-13,-25,-41,]),'Pow':([10,11,12,34,35,44,45,47,48,49,50,87,89,95,97,98,117,118,119,121,146,],[-3,-4,-5,68,69,-38,-28,-54,-55,-45,-46,68,69,-18,-37,-27,-53,-44,-64,-65,-19,]),'Concat':([10,11,12,13,14,34,35,44,45,47,48,49,50,87,89,95,97,98,117,118,119,121,146,],[-3,-4,-5,58,59,-21,-17,-38,-28,-54,-55,-45,-46,-20,-16,-18,-37,-27,-53,-44,-64,-65,-19,]),'RGroup':([10,11,12,13,14,34,35,44,45,47,48,49,50,78,79,87,89,95,97,98,104,105,106,108,109,110,111,117,118,119,121,131,146,147,148,149,],[-3,-4,-5,-2,-15,-21,-17,-38,-28,-54,-55,-45,-46,117,118,-20,-16,-18,-37,-27,-1,-14,-26,-42,-43,-62,-63,-53,-44,-64,-65,149,-19,-13,-25,-41,]),'On':([10,11,12,14,35,45,49,50,66,89,95,98,118,146,],[-3,-4,-5,-15,-17,-28,-45,-46,96,-16,-18,-27,-44,-19,]),'CloseStruct':([10,11,12,14,35,45,49,50,80,81,89,95,98,118,139,140,146,],[-3,-4,-5,-15,-17,-28,-45,-46,119,121,-16,-18,-27,-44,-71,-72,-19,]),'Eq':([38,73,74,75,76,77,90,91,92,93,94,],[72,112,113,114,115,116,123,124,125,126,127,]),'VBoolean':([72,107,116,127,129,130,138,],[109,109,109,109,109,109,109,]),'True':([72,107,116,127,129,130,138,],[110,110,110,110,110,110,110,]),'False':([72,107,116,127,129,130,138,],[111,111,111,111,111,111,111,]),'Or':([105,106,108,109,110,111,148,149,],[129,-26,-42,-43,-62,-63,-25,-41,]),'And':([105,106,108,109,110,111,147,148,149,],[130,-26,-42,-43,-62,-63,130,130,-41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,22,],[2,52,60,]),'IntExpression':([0,1,22,54,55,56,57,68,69,72,113,124,],[3,3,3,83,84,85,86,97,98,100,133,142,]),'AlphExpression':([0,1,22,46,72,88,96,107,114,115,125,126,],[4,4,4,78,101,78,128,78,134,136,143,136,]),'StringExpression':([0,1,22,33,36,37,46,51,67,72,107,112,120,122,123,],[5,5,5,66,70,71,79,81,79,99,79,132,139,140,141,]),'LangExpression':([0,1,22,72,115,126,],[6,6,6,102,135,144,]),'ShowVal':([0,1,22,],[7,7,7,]),'Assigns':([0,1,22,],[8,8,8,]),'Declares':([0,1,22,],[9,9,9,]),'StringLen':([0,1,22,54,55,56,57,68,69,72,113,124,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'AlphConcat':([0,1,22,46,72,88,96,107,114,115,125,126,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'StringConcat':([0,1,22,33,36,37,46,51,67,72,107,112,120,122,123,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'StringPrefix':([0,1,22,72,115,126,],[15,15,15,15,15,15,]),'StringSuffix':([0,1,22,72,115,126,],[16,16,16,16,16,16,]),'AlphKleeneC':([0,1,22,72,115,126,],[17,17,17,17,17,17,]),'AlphPositiveC':([0,1,22,72,115,126,],[18,18,18,18,18,18,]),'LangKleeneC':([0,1,22,72,115,126,],[19,19,19,19,19,19,]),'LangPositiveC':([0,1,22,72,115,126,],[20,20,20,20,20,20,]),'StringAssign':([0,1,22,],[23,23,23,]),'IntAssign':([0,1,22,],[24,24,24,]),'AlphAssign':([0,1,22,],[25,25,25,]),'LangAssign':([0,1,22,],[26,26,26,]),'BooleanAssign':([0,1,22,],[27,27,27,]),'StringDeclare':([0,1,22,],[28,28,28,]),'IntDeclare':([0,1,22,],[29,29,29,]),'AlphDeclare':([0,1,22,],[30,30,30,]),'LangDeclare':([0,1,22,],[31,31,31,]),'BooleanDeclare':([0,1,22,],[32,32,32,]),'AlphPow':([0,1,22,46,58,72,88,96,107,114,115,125,126,],[34,34,34,34,87,34,34,34,34,34,34,34,34,]),'StringPow':([0,1,22,33,36,37,46,51,59,67,72,107,112,120,122,123,],[35,35,35,35,35,35,35,35,89,35,35,35,35,35,35,35,]),'AlphGroup':([0,1,22,46,58,72,88,96,107,114,115,125,126,],[44,44,44,44,44,44,44,44,44,44,44,44,44,]),'StringGroup':([0,1,22,33,36,37,46,51,59,67,72,107,112,120,122,123,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'Alph':([0,1,22,46,58,72,88,96,107,114,115,125,126,],[47,47,47,47,47,47,47,47,47,47,47,47,47,]),'StringList':([51,],[80,]),'BooleanExpression':([72,107,116,127,138,],[103,131,137,145,131,]),'BooleanOr':([72,107,116,127,138,],[104,104,104,104,104,]),'BooleanAnd':([72,107,116,127,129,130,138,],[105,105,105,105,147,148,105,]),'BooleanGroup':([72,107,116,127,129,130,138,],[106,106,106,106,106,106,106,]),'Boolean':([72,107,116,127,129,130,138,],[108,108,108,108,108,108,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',2),
  ('AlphExpression -> AlphConcat','AlphExpression',1,'p_AlphExpression','alph.py',5),
  ('IntExpression -> Int','IntExpression',1,'p_IntegerExpression','integers.py',6),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('IntExpression -> VInt','IntExpression',1,'p_IntegerExpression','integers.py',8),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',6),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',7),
  ('LangExpression -> AlphKleeneC','LangExpression',1,'p_LangExpression','lang.py',8),
  ('LangExpression -> AlphPositiveC','LangExpression',1,'p_LangExpression','lang.py',9),
  ('LangExpression -> LangKleeneC','LangExpression',1,'p_LangExpression','lang.py',10),
  ('LangExpression -> LangPositiveC','LangExpression',1,'p_LangExpression','lang.py',11),
  ('LangExpression -> VLang','LangExpression',1,'p_LangExpression','lang.py',12),
  ('BooleanOr -> BooleanAnd Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',7),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',8),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',7),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',12),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',13),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',13),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',14),
  ('AlphConcat -> AlphConcat Concat AlphPow','AlphConcat',3,'p_AlphConcat','alph.py',14),
  ('AlphConcat -> AlphPow','AlphConcat',1,'p_AlphConcat','alph.py',15),
  ('AlphKleeneC -> AlphExpression KleeneC IntExpression','AlphKleeneC',3,'p_AlphKleeneC','lang.py',17),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('BooleanAnd -> BooleanAnd And BooleanAnd','BooleanAnd',3,'p_BooleanAnd','boolean.py',19),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',20),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',21),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',22),
  ('AlphPositiveC -> AlphExpression PositiveC IntExpression','AlphPositiveC',3,'p_AlphPositiveC','lang.py',23),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',25),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',29),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',30),
  ('expression -> Declares','expression',1,'p_expression','parser.py',31),
  ('AlphPow -> AlphPow Pow IntExpression','AlphPow',3,'p_AlphPow','alph.py',27),
  ('AlphPow -> AlphGroup','AlphPow',1,'p_AlphPow','alph.py',28),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',27),
  ('LangKleeneC -> LangExpression KleeneC IntExpression','LangKleeneC',3,'p_LangKleeneC','lang.py',29),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',31),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',32),
  ('BooleanGroup -> VBoolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',33),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',31),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',32),
  ('StringGroup -> VString','StringGroup',1,'p_StringGroup','strings.py',33),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',34),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',35),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',36),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',37),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',38),
  ('LangPositiveC -> LangExpression PositiveC IntExpression','LangPositiveC',3,'p_LangPositiveC','lang.py',35),
  ('AlphGroup -> LGroup AlphExpression RGroup','AlphGroup',3,'p_AlphGroup','alph.py',38),
  ('AlphGroup -> Alph','AlphGroup',1,'p_AlphGroup','alph.py',39),
  ('AlphGroup -> VAlph','AlphGroup',1,'p_AlphGroup','alph.py',40),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',41),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',43),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',44),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',45),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',46),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',47),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',44),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',45),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',49),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',50),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',49),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',52),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',53),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',54),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',55),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',58),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',59),
  ('StringAssign -> VarName Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',70),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',78),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',79),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',80),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',81),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',95),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',103),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',104),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',105),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',106),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',120),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',128),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',129),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',130),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',131),
  ('LangAssign -> VarName Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',145),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',153),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',154),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',155),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',156),
  ('BooleanAssign -> VarName Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',171),
]
