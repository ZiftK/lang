
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftAddSubleftConcatDivrightPowAdd AlphType And BooleanType CloseStruct CommentText Concat Div EndComment Eq False InitComment Int IntType KleeneC LGroup LangType LenOp NextLine On OpenStruct Or PositiveC Pow Prefix RGroup Show ShowInLine Splitter String StringType Sub SubSequence SubString SuchThat Suffix Term True VAlph VBoolean VInt VLang VString VarNameAlphExpression : AlphConcatBooleanExpression : BooleanOrIntExpression : StringLen\n        | AddSubLangExpression : StringPrefix\n    | StringSuffix\n    | AlphKleeneC\n    | AlphPositiveC\n    | LangKleeneC\n    | LangPositiveC\n    | LangUnion\n    | StringSubSequenceStringExpression : StringConcatBooleanOr : BooleanOr Or BooleanAnd\n                | BooleanAndStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpStringConcat : StringConcat Concat StringPow\n                    | StringPowAlphConcat : AlphConcat Concat AlphPow\n        | AlphPowexpressions : expressions expression Term\n                    | expression TermBooleanAnd : BooleanAnd And BooleanGroup\n                    | BooleanGroupLangUnion : LangUnion Add LangConcat\n                | LangConcatStringPow : StringPow Pow IntExpression\n                | StringGroup expression : IntExpression\n                    | AlphExpression\n                    | StringExpression\n                    | LangExpression\n                    | BooleanExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresAddSub : AddSub Add MultDiv\n                | AddSub Sub MultDiv\n                | MultDivAlphPow : AlphPow Pow IntExpression\n            | AlphGroupStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VStringShowVal : Show expression\n                | ShowInLine expressionBooleanGroup : LGroup BooleanExpression RGroup\n                    | Boolean\n                    | VBooleanLangConcat : LangConcat Concat LangGroup\n                | LangGroupAlphGroup : LGroup AlphExpression RGroup\n    | Alph\n    | VAlphMultDiv : MultDiv Concat IntPow\n                | MultDiv Div IntPow\n                | IntPowDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclare\n        | BooleanDeclareLangGroup : LGroup LangExpression RGroup\n    | VLangBoolean : True\n                | FalseAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssign\n        | BooleanAssignAlphKleeneC : AlphExpression KleeneC IntExpressionIntPow : IntPow Pow Unary\n                | UnaryStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionAlphPositiveC : AlphExpression PositiveC IntExpressionUnary : Sub Primary\n            | PrimaryLangKleeneC : LangExpression KleeneC IntExpressionLangPositiveC : LangExpression PositiveC IntExpressionPrimary : LGroup IntExpression RGroup\n                | VInt\n                | IntStringPrefix : Prefix StringExpressionStringAssign : VString Eq StringExpressionStringSuffix : Suffix StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionStringSubSequence : SubSequence StringExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VLang Eq LangExpressionBooleanDeclare : BooleanType VarName\n                | BooleanType VarName Eq BooleanExpression\n                | BooleanDeclare Splitter VarName\n                | BooleanDeclare Splitter VarName Eq BooleanExpressionBooleanAssign : VBoolean Eq BooleanExpression'
    
_lr_action_items = {'Show':([0,1,24,25,73,124,],[24,24,24,24,-23,-22,]),'ShowInLine':([0,1,24,25,73,124,],[25,25,25,25,-23,-22,]),'LenOp':([0,1,11,12,13,14,24,25,37,39,40,55,56,57,60,61,62,63,64,66,70,71,73,74,75,76,77,91,93,96,97,98,99,106,124,129,130,131,133,143,145,146,147,148,154,160,164,165,166,169,170,172,176,180,193,],[36,36,-3,-4,-1,-13,36,36,-40,-21,-19,-58,-42,-29,-77,36,-54,-55,-44,-86,-90,-91,-23,36,36,36,36,143,-45,-85,36,36,36,36,-22,-38,-39,-20,-18,-16,-56,-57,-41,-28,36,36,-76,-53,-43,-89,-68,-69,36,193,-17,]),'Prefix':([0,1,24,25,61,73,107,124,135,157,162,178,],[41,41,41,41,41,-23,41,-22,41,41,41,41,]),'Suffix':([0,1,24,25,61,73,107,124,135,157,162,178,],[42,42,42,42,42,-23,42,-22,42,42,42,42,]),'SubSequence':([0,1,24,25,61,73,107,124,135,157,162,178,],[44,44,44,44,44,-23,44,-22,44,44,44,44,]),'VString':([0,1,24,25,36,41,42,44,61,67,73,81,92,105,124,159,171,173,175,],[46,46,46,46,93,93,93,93,93,93,-23,93,93,93,-22,93,93,93,93,]),'VarName':([0,1,24,25,50,51,52,53,54,73,86,87,88,89,90,124,],[47,47,47,47,109,110,111,112,113,-23,138,139,140,141,142,-22,]),'VLang':([0,1,24,25,61,73,82,102,107,124,135,157,162,178,],[48,48,48,48,120,-23,120,120,120,-22,120,120,120,120,]),'VBoolean':([0,1,24,25,61,73,83,104,108,124,137,163,179,],[49,49,49,49,121,-23,121,121,121,-22,121,121,121,]),'StringType':([0,1,24,25,73,124,],[50,50,50,50,-23,-22,]),'IntType':([0,1,24,25,73,124,],[51,51,51,51,-23,-22,]),'AlphType':([0,1,24,25,73,124,],[52,52,52,52,-23,-22,]),'LangType':([0,1,24,25,73,124,],[53,53,53,53,-23,-22,]),'BooleanType':([0,1,24,25,73,124,],[54,54,54,54,-23,-22,]),'LGroup':([0,1,24,25,36,38,41,42,44,61,67,73,74,75,76,77,78,79,80,81,82,83,92,94,95,97,98,99,102,104,105,106,107,108,114,124,132,135,137,144,154,157,159,160,161,162,163,171,173,175,176,177,178,179,],[61,61,61,61,92,97,92,92,92,61,92,-23,97,97,97,97,97,97,132,92,135,137,92,97,97,97,97,97,135,137,92,154,157,137,97,-22,132,157,137,132,154,157,92,97,132,157,137,92,92,92,97,132,157,137,]),'VAlph':([0,1,24,25,61,73,80,106,107,124,132,135,144,154,157,161,162,177,178,],[63,63,63,63,63,-23,63,63,63,-22,63,63,63,63,63,63,63,63,63,]),'String':([0,1,24,25,36,41,42,44,61,67,73,81,92,105,124,159,171,173,175,],[64,64,64,64,64,64,64,64,64,64,-23,64,64,64,-22,64,64,64,64,]),'Sub':([0,1,12,24,25,37,55,60,61,66,70,71,73,74,75,76,77,78,79,94,95,96,97,98,99,106,114,124,129,130,145,146,154,160,164,169,176,],[38,38,79,38,38,-40,-58,-77,38,-86,-90,-91,-23,38,38,38,38,38,38,38,38,-85,38,38,38,38,38,-22,-38,-39,-56,-57,38,38,-76,-89,38,]),'OpenStruct':([0,1,24,25,61,73,80,106,107,124,132,135,144,154,157,161,162,177,178,],[67,67,67,67,67,-23,67,67,67,-22,67,67,67,67,67,67,67,67,67,]),'True':([0,1,24,25,61,73,83,104,108,124,137,163,179,],[68,68,68,68,68,-23,68,68,68,-22,68,68,68,]),'False':([0,1,24,25,61,73,83,104,108,124,137,163,179,],[69,69,69,69,69,-23,69,69,69,-22,69,69,69,]),'VInt':([0,1,24,25,38,61,73,74,75,76,77,78,79,94,95,97,98,99,106,114,124,154,160,176,],[70,70,70,70,70,70,-23,70,70,70,70,70,70,70,70,70,70,70,70,70,-22,70,70,70,]),'Int':([0,1,24,25,38,61,73,74,75,76,77,78,79,94,95,97,98,99,106,114,124,154,160,176,],[71,71,71,71,71,71,-23,71,71,71,71,71,71,71,71,71,71,71,71,71,-22,71,71,71,]),'$end':([1,73,124,],[0,-23,-22,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,35,37,39,40,43,45,46,48,49,55,56,57,58,59,60,62,63,64,65,66,68,69,70,71,72,84,85,93,96,100,101,103,109,110,111,112,113,120,121,125,126,127,128,129,130,131,133,134,136,138,139,140,141,142,143,145,146,147,148,149,150,151,152,153,155,158,164,165,166,167,168,169,170,172,181,182,183,184,185,188,189,190,191,192,193,],[73,-30,-31,-32,-33,-34,-35,-36,-37,-3,-4,-1,-13,-5,-6,-7,-8,-9,-10,-11,-12,-2,-70,-71,-72,-73,-74,-59,-60,-61,-62,-63,-40,-21,-19,-27,-15,-45,-65,-50,-58,-42,-29,-52,-25,-77,-54,-55,-44,-49,-86,-66,-67,-90,-91,124,-46,-47,-45,-85,-92,-94,-99,-80,-95,-101,-106,-111,-65,-50,-75,-84,-87,-88,-38,-39,-20,-18,-26,-14,-82,-97,-103,-108,-113,-16,-56,-57,-41,-28,-51,-24,-93,-100,-105,-110,-115,-76,-53,-43,-64,-48,-89,-68,-69,-81,-96,-102,-107,-112,-83,-98,-104,-109,-114,-17,]),'KleeneC':([4,6,11,12,13,14,15,16,17,18,19,20,21,22,37,39,40,43,48,55,56,57,58,60,62,63,64,66,70,71,93,96,100,101,103,115,117,120,125,126,127,128,129,130,131,133,134,143,145,146,147,148,149,155,156,164,165,166,167,169,170,172,184,191,193,],[74,76,-3,-4,-1,-13,-5,-6,-7,-8,-9,-10,-11,-12,-40,-21,-19,-27,-65,-58,-42,-29,-52,-77,-54,-55,-44,-86,-90,-91,-45,-85,-92,-94,-99,74,76,-65,-75,-84,-87,-88,-38,-39,-20,-18,-26,-16,-56,-57,-41,-28,-51,76,74,-76,-53,-43,-64,-89,-68,-69,76,76,-17,]),'PositiveC':([4,6,11,12,13,14,15,16,17,18,19,20,21,22,37,39,40,43,48,55,56,57,58,60,62,63,64,66,70,71,93,96,100,101,103,115,117,120,125,126,127,128,129,130,131,133,134,143,145,146,147,148,149,155,156,164,165,166,167,169,170,172,184,191,193,],[75,77,-3,-4,-1,-13,-5,-6,-7,-8,-9,-10,-11,-12,-40,-21,-19,-27,-65,-58,-42,-29,-52,-77,-54,-55,-44,-86,-90,-91,-45,-85,-92,-94,-99,75,77,-65,-75,-84,-87,-88,-38,-39,-20,-18,-26,-16,-56,-57,-41,-28,-51,77,75,-76,-53,-43,-64,-89,-68,-69,77,77,-17,]),'RGroup':([11,12,13,14,15,16,17,18,19,20,21,22,23,37,39,40,43,45,55,56,57,58,59,60,62,63,64,65,66,68,69,70,71,93,96,100,101,103,115,116,117,118,119,120,121,125,126,127,128,129,130,131,133,134,136,143,145,146,147,148,149,150,164,165,166,167,168,169,170,172,174,193,],[-3,-4,-1,-13,-5,-6,-7,-8,-9,-10,-11,-12,-2,-40,-21,-19,-27,-15,-58,-42,-29,-52,-25,-77,-54,-55,-44,-49,-86,-66,-67,-90,-91,-45,-85,-92,-94,-99,165,166,167,168,169,-65,-50,-75,-84,-87,-88,-38,-39,-20,-18,-26,-14,-16,-56,-57,-41,-28,-51,-24,-76,-53,-43,-64,-48,-89,-68,-69,165,-17,]),'Splitter':([11,12,13,14,15,16,17,18,19,20,21,22,23,31,32,33,34,35,37,39,40,43,45,55,56,57,58,59,60,62,63,64,65,66,68,69,70,71,93,96,100,101,103,109,110,111,112,113,120,121,122,123,125,126,127,128,129,130,131,133,134,136,138,139,140,141,142,143,145,146,147,148,149,150,164,165,166,167,168,169,170,172,181,182,183,184,185,186,187,188,189,190,191,192,193,],[-3,-4,-1,-13,-5,-6,-7,-8,-9,-10,-11,-12,-2,86,87,88,89,90,-40,-21,-19,-27,-15,-58,-42,-29,-52,-25,-77,-54,-55,-44,-49,-86,-66,-67,-90,-91,-45,-85,-92,-94,-99,-80,-95,-101,-106,-111,-65,-50,171,173,-75,-84,-87,-88,-38,-39,-20,-18,-26,-14,-82,-97,-103,-108,-113,-16,-56,-57,-41,-28,-51,-24,-76,-53,-43,-64,-48,-89,-68,-69,-81,-96,-102,-107,-112,-78,-79,-83,-98,-104,-109,-114,-17,]),'Pow':([11,12,37,39,40,46,55,56,57,60,62,63,64,66,70,71,93,96,129,130,131,133,143,145,146,147,148,164,165,166,169,170,172,193,],[-3,-4,-40,98,99,-45,114,-42,-29,-77,-54,-55,-44,-86,-90,-91,-45,-85,-38,-39,98,99,-16,114,114,-41,-28,-76,-53,-43,-89,-68,-69,-17,]),'Concat':([11,12,13,14,37,39,40,43,46,48,55,56,57,58,60,62,63,64,66,70,71,93,96,120,129,130,131,133,134,143,145,146,147,148,149,164,165,166,167,169,170,172,193,],[-3,-4,80,81,94,-21,-19,102,-45,-65,-58,-42,-29,-52,-77,-54,-55,-44,-86,-90,-91,-45,-85,-65,94,94,-20,-18,102,-16,-56,-57,-41,-28,-51,-76,-53,-43,-64,-89,-68,-69,-17,]),'On':([11,12,14,37,40,55,57,60,64,66,70,71,91,93,96,129,130,133,143,145,146,148,164,166,169,193,],[-3,-4,-13,-40,-19,-58,-29,-77,-44,-86,-90,-91,144,-45,-85,-38,-39,-18,-16,-56,-57,-28,-76,-43,-89,-17,]),'CloseStruct':([11,12,14,37,40,55,57,60,64,66,70,71,93,96,122,123,129,130,133,143,145,146,148,164,166,169,186,187,193,],[-3,-4,-13,-40,-19,-58,-29,-77,-44,-86,-90,-91,-45,-85,170,172,-38,-39,-18,-16,-56,-57,-28,-76,-43,-89,-78,-79,-17,]),'Add':([12,21,37,43,48,55,58,60,66,70,71,96,120,129,130,134,145,146,149,164,167,169,],[78,82,-40,-27,-65,-58,-52,-77,-86,-90,-91,-85,-65,-38,-39,-26,-56,-57,-51,-76,-64,-89,]),'Or':([23,45,49,59,65,68,69,121,136,150,168,],[83,-15,-50,-25,-49,-66,-67,-50,-14,-24,-48,]),'Div':([37,55,60,66,70,71,96,129,130,145,146,164,169,],[95,-58,-77,-86,-90,-91,-85,95,95,-56,-57,-76,-89,]),'And':([45,49,59,65,68,69,121,136,150,168,],[104,-50,-25,-49,-66,-67,-50,104,-24,-48,]),'Eq':([46,47,48,49,109,110,111,112,113,138,139,140,141,142,],[105,106,107,108,159,160,161,162,163,175,176,177,178,179,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,24,25,],[2,72,84,85,]),'IntExpression':([0,1,24,25,61,74,75,76,77,97,98,99,106,154,160,176,],[3,3,3,3,119,125,126,127,128,119,147,148,152,119,182,189,]),'AlphExpression':([0,1,24,25,61,106,107,132,135,144,154,157,161,162,177,178,],[4,4,4,4,115,153,156,174,156,180,174,115,183,156,190,156,]),'StringExpression':([0,1,24,25,36,41,42,44,61,67,92,105,159,171,173,175,],[5,5,5,5,91,100,101,103,116,123,116,151,181,186,187,188,]),'LangExpression':([0,1,24,25,61,107,135,157,162,178,],[6,6,6,6,117,155,117,117,184,191,]),'BooleanExpression':([0,1,24,25,61,108,137,163,179,],[7,7,7,7,118,158,118,185,192,]),'ShowVal':([0,1,24,25,],[8,8,8,8,]),'Assigns':([0,1,24,25,],[9,9,9,9,]),'Declares':([0,1,24,25,],[10,10,10,10,]),'StringLen':([0,1,24,25,61,74,75,76,77,97,98,99,106,154,160,176,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'AddSub':([0,1,24,25,61,74,75,76,77,97,98,99,106,154,160,176,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'AlphConcat':([0,1,24,25,61,106,107,132,135,144,154,157,161,162,177,178,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'StringConcat':([0,1,24,25,36,41,42,44,61,67,92,105,159,171,173,175,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'StringPrefix':([0,1,24,25,61,107,135,157,162,178,],[15,15,15,15,15,15,15,15,15,15,]),'StringSuffix':([0,1,24,25,61,107,135,157,162,178,],[16,16,16,16,16,16,16,16,16,16,]),'AlphKleeneC':([0,1,24,25,61,107,135,157,162,178,],[17,17,17,17,17,17,17,17,17,17,]),'AlphPositiveC':([0,1,24,25,61,107,135,157,162,178,],[18,18,18,18,18,18,18,18,18,18,]),'LangKleeneC':([0,1,24,25,61,107,135,157,162,178,],[19,19,19,19,19,19,19,19,19,19,]),'LangPositiveC':([0,1,24,25,61,107,135,157,162,178,],[20,20,20,20,20,20,20,20,20,20,]),'LangUnion':([0,1,24,25,61,107,135,157,162,178,],[21,21,21,21,21,21,21,21,21,21,]),'StringSubSequence':([0,1,24,25,61,107,135,157,162,178,],[22,22,22,22,22,22,22,22,22,22,]),'BooleanOr':([0,1,24,25,61,108,137,163,179,],[23,23,23,23,23,23,23,23,23,]),'StringAssign':([0,1,24,25,],[26,26,26,26,]),'IntAssign':([0,1,24,25,],[27,27,27,27,]),'AlphAssign':([0,1,24,25,],[28,28,28,28,]),'LangAssign':([0,1,24,25,],[29,29,29,29,]),'BooleanAssign':([0,1,24,25,],[30,30,30,30,]),'StringDeclare':([0,1,24,25,],[31,31,31,31,]),'IntDeclare':([0,1,24,25,],[32,32,32,32,]),'AlphDeclare':([0,1,24,25,],[33,33,33,33,]),'LangDeclare':([0,1,24,25,],[34,34,34,34,]),'BooleanDeclare':([0,1,24,25,],[35,35,35,35,]),'MultDiv':([0,1,24,25,61,74,75,76,77,78,79,97,98,99,106,154,160,176,],[37,37,37,37,37,37,37,37,37,129,130,37,37,37,37,37,37,37,]),'AlphPow':([0,1,24,25,61,80,106,107,132,135,144,154,157,161,162,177,178,],[39,39,39,39,39,131,39,39,39,39,39,39,39,39,39,39,39,]),'StringPow':([0,1,24,25,36,41,42,44,61,67,81,92,105,159,171,173,175,],[40,40,40,40,40,40,40,40,40,40,133,40,40,40,40,40,40,]),'LangConcat':([0,1,24,25,61,82,107,135,157,162,178,],[43,43,43,43,43,134,43,43,43,43,43,]),'BooleanAnd':([0,1,24,25,61,83,108,137,163,179,],[45,45,45,45,45,136,45,45,45,45,]),'IntPow':([0,1,24,25,61,74,75,76,77,78,79,94,95,97,98,99,106,154,160,176,],[55,55,55,55,55,55,55,55,55,55,55,145,146,55,55,55,55,55,55,55,]),'AlphGroup':([0,1,24,25,61,80,106,107,132,135,144,154,157,161,162,177,178,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'StringGroup':([0,1,24,25,36,41,42,44,61,67,81,92,105,159,171,173,175,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'LangGroup':([0,1,24,25,61,82,102,107,135,157,162,178,],[58,58,58,58,58,58,149,58,58,58,58,58,]),'BooleanGroup':([0,1,24,25,61,83,104,108,137,163,179,],[59,59,59,59,59,59,150,59,59,59,59,]),'Unary':([0,1,24,25,61,74,75,76,77,78,79,94,95,97,98,99,106,114,154,160,176,],[60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,164,60,60,60,]),'Alph':([0,1,24,25,61,80,106,107,132,135,144,154,157,161,162,177,178,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'Boolean':([0,1,24,25,61,83,104,108,137,163,179,],[65,65,65,65,65,65,65,65,65,65,65,]),'Primary':([0,1,24,25,38,61,74,75,76,77,78,79,94,95,97,98,99,106,114,154,160,176,],[66,66,66,66,96,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'StringList':([67,],[122,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('AlphExpression -> AlphConcat','AlphExpression',1,'p_AlphExpression','alph.py',5),
  ('BooleanExpression -> BooleanOr','BooleanExpression',1,'p_BooleanExpression','boolean.py',5),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('IntExpression -> AddSub','IntExpression',1,'p_IntegerExpression','integers.py',8),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',7),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',8),
  ('LangExpression -> AlphKleeneC','LangExpression',1,'p_LangExpression','lang.py',9),
  ('LangExpression -> AlphPositiveC','LangExpression',1,'p_LangExpression','lang.py',10),
  ('LangExpression -> LangKleeneC','LangExpression',1,'p_LangExpression','lang.py',11),
  ('LangExpression -> LangPositiveC','LangExpression',1,'p_LangExpression','lang.py',12),
  ('LangExpression -> LangUnion','LangExpression',1,'p_LangExpression','lang.py',13),
  ('LangExpression -> StringSubSequence','LangExpression',1,'p_LangExpression','lang.py',14),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',8),
  ('BooleanOr -> BooleanOr Or BooleanAnd','BooleanOr',3,'p_BooleanOr','boolean.py',10),
  ('BooleanOr -> BooleanAnd','BooleanOr',1,'p_BooleanOr','boolean.py',11),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',13),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',14),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',13),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',14),
  ('AlphConcat -> AlphConcat Concat AlphPow','AlphConcat',3,'p_AlphConcat','alph.py',14),
  ('AlphConcat -> AlphPow','AlphConcat',1,'p_AlphConcat','alph.py',15),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',19),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',20),
  ('BooleanAnd -> BooleanAnd And BooleanGroup','BooleanAnd',3,'p_BooleanAnd','boolean.py',22),
  ('BooleanAnd -> BooleanGroup','BooleanAnd',1,'p_BooleanAnd','boolean.py',23),
  ('LangUnion -> LangUnion Add LangConcat','LangUnion',3,'p_LangUnion','lang.py',22),
  ('LangUnion -> LangConcat','LangUnion',1,'p_LangUnion','lang.py',23),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',22),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',23),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',28),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',29),
  ('expression -> BooleanExpression','expression',1,'p_expression','parser.py',30),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',31),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',32),
  ('expression -> Declares','expression',1,'p_expression','parser.py',33),
  ('AddSub -> AddSub Add MultDiv','AddSub',3,'p_IntAddSub','integers.py',26),
  ('AddSub -> AddSub Sub MultDiv','AddSub',3,'p_IntAddSub','integers.py',27),
  ('AddSub -> MultDiv','AddSub',1,'p_IntAddSub','integers.py',28),
  ('AlphPow -> AlphPow Pow IntExpression','AlphPow',3,'p_AlphPow','alph.py',27),
  ('AlphPow -> AlphGroup','AlphPow',1,'p_AlphPow','alph.py',28),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',32),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',33),
  ('StringGroup -> VString','StringGroup',1,'p_StringGroup','strings.py',34),
  ('ShowVal -> Show expression','ShowVal',2,'p_ShowVal','instructions.py',33),
  ('ShowVal -> ShowInLine expression','ShowVal',2,'p_ShowVal','instructions.py',34),
  ('BooleanGroup -> LGroup BooleanExpression RGroup','BooleanGroup',3,'p_BooleanGroup','boolean.py',34),
  ('BooleanGroup -> Boolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',35),
  ('BooleanGroup -> VBoolean','BooleanGroup',1,'p_BooleanGroup','boolean.py',36),
  ('LangConcat -> LangConcat Concat LangGroup','LangConcat',3,'p_LangConcat','lang.py',34),
  ('LangConcat -> LangGroup','LangConcat',1,'p_LangConcat','lang.py',35),
  ('AlphGroup -> LGroup AlphExpression RGroup','AlphGroup',3,'p_AlphGroup','alph.py',38),
  ('AlphGroup -> Alph','AlphGroup',1,'p_AlphGroup','alph.py',39),
  ('AlphGroup -> VAlph','AlphGroup',1,'p_AlphGroup','alph.py',40),
  ('MultDiv -> MultDiv Concat IntPow','MultDiv',3,'p_IntMultDiv','integers.py',40),
  ('MultDiv -> MultDiv Div IntPow','MultDiv',3,'p_IntMultDiv','integers.py',41),
  ('MultDiv -> IntPow','MultDiv',1,'p_IntMultDiv','integers.py',42),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',44),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',45),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',46),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',47),
  ('Declares -> BooleanDeclare','Declares',1,'p_Declares','instructions.py',48),
  ('LangGroup -> LGroup LangExpression RGroup','LangGroup',3,'p_LangGroup','lang.py',46),
  ('LangGroup -> VLang','LangGroup',1,'p_LangGroup','lang.py',47),
  ('Boolean -> True','Boolean',1,'p_Boolean','boolean.py',47),
  ('Boolean -> False','Boolean',1,'p_Boolean','boolean.py',48),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',49),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',50),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',53),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',54),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',55),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',56),
  ('Assigns -> BooleanAssign','Assigns',1,'p_Assigns','instructions.py',57),
  ('AlphKleeneC -> AlphExpression KleeneC IntExpression','AlphKleeneC',3,'p_AlphKleeneC','lang.py',56),
  ('IntPow -> IntPow Pow Unary','IntPow',3,'p_IntPow','integers.py',57),
  ('IntPow -> Unary','IntPow',1,'p_IntPow','integers.py',58),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',60),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',61),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',62),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',63),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',64),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',65),
  ('AlphPositiveC -> AlphExpression PositiveC IntExpression','AlphPositiveC',3,'p_AlphPositiveC','lang.py',62),
  ('Unary -> Sub Primary','Unary',2,'p_IntUnary','integers.py',67),
  ('Unary -> Primary','Unary',1,'p_IntUnary','integers.py',68),
  ('LangKleeneC -> LangExpression KleeneC IntExpression','LangKleeneC',3,'p_LangKleeneC','lang.py',68),
  ('LangPositiveC -> LangExpression PositiveC IntExpression','LangPositiveC',3,'p_LangPositiveC','lang.py',74),
  ('Primary -> LGroup IntExpression RGroup','Primary',3,'p_IntPrimary','integers.py',76),
  ('Primary -> VInt','Primary',1,'p_IntPrimary','integers.py',77),
  ('Primary -> Int','Primary',1,'p_IntPrimary','integers.py',78),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',80),
  ('StringAssign -> VString Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',85),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',88),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',93),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',94),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',95),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',96),
  ('StringSubSequence -> SubSequence StringExpression','StringSubSequence',2,'p_StringSubSequence','lang.py',95),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',115),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',123),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',124),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',125),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',126),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',145),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',153),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',154),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',155),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',156),
  ('LangAssign -> VLang Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',175),
  ('BooleanDeclare -> BooleanType VarName','BooleanDeclare',2,'p_BooleanDeclare','instructions.py',183),
  ('BooleanDeclare -> BooleanType VarName Eq BooleanExpression','BooleanDeclare',4,'p_BooleanDeclare','instructions.py',184),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName','BooleanDeclare',3,'p_BooleanDeclare','instructions.py',185),
  ('BooleanDeclare -> BooleanDeclare Splitter VarName Eq BooleanExpression','BooleanDeclare',5,'p_BooleanDeclare','instructions.py',186),
  ('BooleanAssign -> VBoolean Eq BooleanExpression','BooleanAssign',3,'p_BooleanAssign','instructions.py',206),
]
