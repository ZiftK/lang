
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'expressionsleftConcatrightPowAlphType CloseStruct Concat Eq Int IntType LGroup LangType LenOp NextLine On OpenStruct Pow Prefix RGroup Show Splitter String StringType Suffix Term VarNameAlphExpression : Alph\n    | VarValueLangExpression : StringPrefix\n    | StringSuffixIntExpression : Int\n        | StringLen\n        | VarValueVarValue : VarNameStringExpression : StringConcatAlph : OpenStruct StringList CloseStruct\n            | OpenStruct StringExpression CloseStructStringPrefix : Prefix StringExpressionStringLen : LenOp StringExpression LenOp\n        | LenOp StringExpression On AlphExpression LenOpStringConcat : StringConcat Concat StringPow\n                    | StringPowStringSuffix : Suffix StringExpressionStringList : StringList Splitter StringExpression\n                    | StringExpression Splitter StringExpressionexpressions : expressions expression Term\n                    | expression TermStringPow : StringPow Pow IntExpression\n                | StringGroup expression : StringExpression\n                    | IntExpression\n                    | AlphExpression\n                    | LangExpression\n                    | ShowVal\n                    | Assigns\n                    | DeclaresShowVal : Show IntExpression\n                | Show StringExpressionStringGroup : LGroup StringExpression RGroup\n                    | String\n                    | VarValueDeclares : StringDeclare\n        | IntDeclare\n        | AlphDeclare\n        | LangDeclareAssigns : StringAssign\n        | IntAssign\n        | AlphAssign\n        | LangAssignStringDeclare : StringType VarName\n                | StringType VarName Eq StringExpression\n                | StringDeclare Splitter VarName\n                | StringDeclare Splitter VarName Eq StringExpressionStringAssign : VarName Eq StringExpressionIntDeclare : IntType VarName\n        | IntType VarName Eq IntExpression\n        | IntDeclare Splitter VarName\n        | IntDeclare Splitter VarName Eq IntExpressionIntAssign : VarName Eq IntExpressionAlphDeclare : AlphType VarName\n        | AlphType VarName Eq AlphExpression\n        | AlphDeclare Splitter VarName\n        | AlphDeclare Splitter VarName Eq AlphExpressionAlphAssign : VarName Eq AlphExpressionLangDeclare : LangType VarName\n        | LangType VarName Eq LangExpression\n        | LangDeclare Splitter VarName\n        | LangDeclare Splitter VarName Eq LangExpressionLangAssign : VarName Eq LangExpression'
    
_lr_action_items = {'Int':([0,1,17,40,50,53,63,82,87,],[11,11,11,-21,11,11,-20,11,11,]),'Show':([0,1,40,63,],[17,17,-21,-20,]),'LenOp':([0,1,10,11,12,14,17,26,36,38,40,45,50,51,52,53,63,64,69,70,71,77,79,82,85,87,90,91,102,],[27,27,-9,-5,-6,-1,27,-16,-23,-34,-21,-8,27,71,-35,27,-20,-15,-22,-7,-13,-10,-11,27,-33,27,102,-2,-14,]),'VarName':([0,1,17,27,29,30,31,32,33,34,35,37,40,41,46,47,48,49,50,53,63,72,78,80,81,82,83,86,87,88,],[28,28,45,45,45,45,45,58,59,60,61,45,-21,45,65,66,67,68,45,45,-20,45,45,45,45,45,45,45,45,45,]),'OpenStruct':([0,1,40,53,63,72,83,88,],[29,29,-21,29,-20,29,29,29,]),'Prefix':([0,1,40,53,63,84,89,],[30,30,-21,30,-20,30,30,]),'Suffix':([0,1,40,53,63,84,89,],[31,31,-21,31,-20,31,31,]),'StringType':([0,1,40,63,],[32,32,-21,-20,]),'IntType':([0,1,40,63,],[33,33,-21,-20,]),'AlphType':([0,1,40,63,],[34,34,-21,-20,]),'LangType':([0,1,40,63,],[35,35,-21,-20,]),'LGroup':([0,1,17,27,29,30,31,37,40,41,53,63,78,80,81,86,],[37,37,37,37,37,37,37,37,-21,37,37,-20,37,37,37,37,]),'String':([0,1,17,27,29,30,31,37,40,41,53,63,78,80,81,86,],[38,38,38,38,38,38,38,38,-21,38,38,-20,38,38,38,38,]),'$end':([1,40,63,],[0,-21,-20,]),'Term':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,36,38,39,42,43,44,45,52,56,57,58,59,60,61,64,65,66,67,68,69,70,71,73,74,75,76,77,79,85,91,94,95,96,97,98,99,100,101,102,],[40,-24,-25,-26,-27,-28,-29,-30,-9,-5,-6,-2,-1,-3,-4,-40,-41,-42,-43,-36,-37,-38,-39,-16,-8,-23,-34,63,-31,-32,-7,-8,-35,-12,-17,-44,-49,-54,-59,-15,-46,-51,-56,-61,-22,-7,-13,-48,-53,-58,-63,-10,-11,-33,-2,-45,-50,-55,-60,-47,-52,-57,-62,-14,]),'On':([10,11,12,26,36,38,45,51,52,64,69,70,71,85,102,],[-9,-5,-6,-16,-23,-34,-8,72,-35,-15,-22,-7,-13,-33,-14,]),'CloseStruct':([10,11,12,26,36,38,45,52,54,55,64,69,70,71,85,92,93,102,],[-9,-5,-6,-16,-23,-34,-8,-35,77,79,-15,-22,-7,-13,-33,-18,-19,-14,]),'Splitter':([10,11,12,14,15,16,22,23,24,25,26,36,38,45,52,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,77,79,85,91,92,93,94,95,96,97,98,99,100,101,102,],[-9,-5,-6,-1,-3,-4,46,47,48,49,-16,-23,-34,-8,-35,78,80,-12,-17,-44,-49,-54,-59,-15,-46,-51,-56,-61,-22,-7,-13,-10,-11,-33,-2,-18,-19,-45,-50,-55,-60,-47,-52,-57,-62,-14,]),'RGroup':([10,11,12,26,36,38,45,52,62,64,69,70,71,85,102,],[-9,-5,-6,-16,-23,-34,-8,-35,85,-15,-22,-7,-13,-33,-14,]),'Concat':([10,11,12,13,26,28,36,38,44,45,52,64,69,70,71,85,102,],[41,-5,-6,-35,-16,-8,-23,-34,-35,-8,-35,-15,-22,-7,-13,-33,-14,]),'Pow':([11,12,13,26,28,36,38,44,45,52,64,69,70,71,85,102,],[-5,-6,-35,50,-8,-23,-34,-35,-8,-35,50,-22,-7,-13,-33,-14,]),'Eq':([28,58,59,60,61,65,66,67,68,],[53,81,82,83,84,86,87,88,89,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expressions':([0,],[1,]),'expression':([0,1,],[2,39,]),'StringExpression':([0,1,17,27,29,30,31,37,53,78,80,81,86,],[3,3,43,51,55,56,57,62,73,92,93,94,98,]),'IntExpression':([0,1,17,50,53,82,87,],[4,4,42,69,74,95,99,]),'AlphExpression':([0,1,53,72,83,88,],[5,5,75,90,96,100,]),'LangExpression':([0,1,53,84,89,],[6,6,76,97,101,]),'ShowVal':([0,1,],[7,7,]),'Assigns':([0,1,],[8,8,]),'Declares':([0,1,],[9,9,]),'StringConcat':([0,1,17,27,29,30,31,37,53,78,80,81,86,],[10,10,10,10,10,10,10,10,10,10,10,10,10,]),'StringLen':([0,1,17,50,53,82,87,],[12,12,12,12,12,12,12,]),'VarValue':([0,1,17,27,29,30,31,37,41,50,53,72,78,80,81,82,83,86,87,88,],[13,13,44,52,52,52,52,52,52,70,13,91,52,52,52,70,91,52,70,91,]),'Alph':([0,1,53,72,83,88,],[14,14,14,14,14,14,]),'StringPrefix':([0,1,53,84,89,],[15,15,15,15,15,]),'StringSuffix':([0,1,53,84,89,],[16,16,16,16,16,]),'StringAssign':([0,1,],[18,18,]),'IntAssign':([0,1,],[19,19,]),'AlphAssign':([0,1,],[20,20,]),'LangAssign':([0,1,],[21,21,]),'StringDeclare':([0,1,],[22,22,]),'IntDeclare':([0,1,],[23,23,]),'AlphDeclare':([0,1,],[24,24,]),'LangDeclare':([0,1,],[25,25,]),'StringPow':([0,1,17,27,29,30,31,37,41,53,78,80,81,86,],[26,26,26,26,26,26,26,26,64,26,26,26,26,26,]),'StringGroup':([0,1,17,27,29,30,31,37,41,53,78,80,81,86,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'StringList':([29,],[54,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expressions","S'",1,None,None,None),
  ('AlphExpression -> Alph','AlphExpression',1,'p_AlphExpression','alph.py',2),
  ('AlphExpression -> VarValue','AlphExpression',1,'p_AlphExpression','alph.py',3),
  ('LangExpression -> StringPrefix','LangExpression',1,'p_LangExpression','lang.py',3),
  ('LangExpression -> StringSuffix','LangExpression',1,'p_LangExpression','lang.py',4),
  ('IntExpression -> Int','IntExpression',1,'p_IntegerExpression','integers.py',5),
  ('IntExpression -> StringLen','IntExpression',1,'p_IntegerExpression','integers.py',6),
  ('IntExpression -> VarValue','IntExpression',1,'p_IntegerExpression','integers.py',7),
  ('VarValue -> VarName','VarValue',1,'p_VarValue','variables.py',5),
  ('StringExpression -> StringConcat','StringExpression',1,'p_StringExpression','strings.py',7),
  ('Alph -> OpenStruct StringList CloseStruct','Alph',3,'p_Alph','alph.py',8),
  ('Alph -> OpenStruct StringExpression CloseStruct','Alph',3,'p_Alph','alph.py',9),
  ('StringPrefix -> Prefix StringExpression','StringPrefix',2,'p_StringPrefix','lang.py',9),
  ('StringLen -> LenOp StringExpression LenOp','StringLen',3,'p_StringLen','integers.py',12),
  ('StringLen -> LenOp StringExpression On AlphExpression LenOp','StringLen',5,'p_StringLen','integers.py',13),
  ('StringConcat -> StringConcat Concat StringPow','StringConcat',3,'p_StringConcat','strings.py',12),
  ('StringConcat -> StringPow','StringConcat',1,'p_StringConcat','strings.py',13),
  ('StringSuffix -> Suffix StringExpression','StringSuffix',2,'p_StringSuffix','lang.py',16),
  ('StringList -> StringList Splitter StringExpression','StringList',3,'p_StringList','alph.py',17),
  ('StringList -> StringExpression Splitter StringExpression','StringList',3,'p_StringList','alph.py',18),
  ('expressions -> expressions expression Term','expressions',3,'p_expressions','parser.py',18),
  ('expressions -> expression Term','expressions',2,'p_expressions','parser.py',19),
  ('StringPow -> StringPow Pow IntExpression','StringPow',3,'p_StringPow','strings.py',21),
  ('StringPow -> StringGroup','StringPow',1,'p_StringPow','strings.py',22),
  ('expression -> StringExpression','expression',1,'p_expression','parser.py',24),
  ('expression -> IntExpression','expression',1,'p_expression','parser.py',25),
  ('expression -> AlphExpression','expression',1,'p_expression','parser.py',26),
  ('expression -> LangExpression','expression',1,'p_expression','parser.py',27),
  ('expression -> ShowVal','expression',1,'p_expression','parser.py',28),
  ('expression -> Assigns','expression',1,'p_expression','parser.py',29),
  ('expression -> Declares','expression',1,'p_expression','parser.py',30),
  ('ShowVal -> Show IntExpression','ShowVal',2,'p_ShowVal','instructions.py',27),
  ('ShowVal -> Show StringExpression','ShowVal',2,'p_ShowVal','instructions.py',28),
  ('StringGroup -> LGroup StringExpression RGroup','StringGroup',3,'p_StringGroup','strings.py',31),
  ('StringGroup -> String','StringGroup',1,'p_StringGroup','strings.py',32),
  ('StringGroup -> VarValue','StringGroup',1,'p_StringGroup','strings.py',33),
  ('Declares -> StringDeclare','Declares',1,'p_Declares','instructions.py',39),
  ('Declares -> IntDeclare','Declares',1,'p_Declares','instructions.py',40),
  ('Declares -> AlphDeclare','Declares',1,'p_Declares','instructions.py',41),
  ('Declares -> LangDeclare','Declares',1,'p_Declares','instructions.py',42),
  ('Assigns -> StringAssign','Assigns',1,'p_Assigns','instructions.py',47),
  ('Assigns -> IntAssign','Assigns',1,'p_Assigns','instructions.py',48),
  ('Assigns -> AlphAssign','Assigns',1,'p_Assigns','instructions.py',49),
  ('Assigns -> LangAssign','Assigns',1,'p_Assigns','instructions.py',50),
  ('StringDeclare -> StringType VarName','StringDeclare',2,'p_StringDeclare','instructions.py',55),
  ('StringDeclare -> StringType VarName Eq StringExpression','StringDeclare',4,'p_StringDeclare','instructions.py',56),
  ('StringDeclare -> StringDeclare Splitter VarName','StringDeclare',3,'p_StringDeclare','instructions.py',57),
  ('StringDeclare -> StringDeclare Splitter VarName Eq StringExpression','StringDeclare',5,'p_StringDeclare','instructions.py',58),
  ('StringAssign -> VarName Eq StringExpression','StringAssign',3,'p_StringAssign','instructions.py',73),
  ('IntDeclare -> IntType VarName','IntDeclare',2,'p_IntDeclare','instructions.py',81),
  ('IntDeclare -> IntType VarName Eq IntExpression','IntDeclare',4,'p_IntDeclare','instructions.py',82),
  ('IntDeclare -> IntDeclare Splitter VarName','IntDeclare',3,'p_IntDeclare','instructions.py',83),
  ('IntDeclare -> IntDeclare Splitter VarName Eq IntExpression','IntDeclare',5,'p_IntDeclare','instructions.py',84),
  ('IntAssign -> VarName Eq IntExpression','IntAssign',3,'p_IntAssign','instructions.py',98),
  ('AlphDeclare -> AlphType VarName','AlphDeclare',2,'p_AlphDeclare','instructions.py',106),
  ('AlphDeclare -> AlphType VarName Eq AlphExpression','AlphDeclare',4,'p_AlphDeclare','instructions.py',107),
  ('AlphDeclare -> AlphDeclare Splitter VarName','AlphDeclare',3,'p_AlphDeclare','instructions.py',108),
  ('AlphDeclare -> AlphDeclare Splitter VarName Eq AlphExpression','AlphDeclare',5,'p_AlphDeclare','instructions.py',109),
  ('AlphAssign -> VarName Eq AlphExpression','AlphAssign',3,'p_AlphAssign','instructions.py',123),
  ('LangDeclare -> LangType VarName','LangDeclare',2,'p_LangDeclare','instructions.py',131),
  ('LangDeclare -> LangType VarName Eq LangExpression','LangDeclare',4,'p_LangDeclare','instructions.py',132),
  ('LangDeclare -> LangDeclare Splitter VarName','LangDeclare',3,'p_LangDeclare','instructions.py',133),
  ('LangDeclare -> LangDeclare Splitter VarName Eq LangExpression','LangDeclare',5,'p_LangDeclare','instructions.py',134),
  ('LangAssign -> VarName Eq LangExpression','LangAssign',3,'p_LangAssign','instructions.py',148),
]
